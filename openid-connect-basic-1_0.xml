<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd">
<rfc category="exp" docName="openid-connect-basic-1_0" ipr="trust200902">
  <?rfc toc="yes" ?>

  <?rfc tocdepth="3" ?>

  <?rfc symrefs="yes" ?>

  <?rfc sortrefs="yes"?>

  <?rfc strict="no" ?>

  <?rfc iprnotified="no" ?>

  <?rfc private="Draft" ?>

  <front>
    <title abbrev="OpenID Connect Basic 1.0 - draft 14">OpenID Connect Basic
    Client 1.0 - draft 14</title>

    <author fullname="Nat Sakimura" initials="N." role="editor"
            surname="Sakimura">
      <organization abbrev="NRI">Nomura Research Institute,
      Ltd.</organization>

      <address>
        <email>n-sakimura@nri.co.jp</email>
      </address>
    </author>

    <author fullname="John Bradley" initials="J." role="editor"
            surname="Bradley">
      <organization>Independent</organization>

      <address>
        <email>jbradley@mac.com</email>
      </address>
    </author>

    <author fullname="Breno de Medeiros" initials="B." surname="de Medeiros">
      <organization abbrev="Google">Google</organization>

      <address>
        <email>breno@google.com</email>
      </address>
    </author>

    <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>

      <address>
        <email>mbj@microsoft.com</email>
      </address>
    </author>

    <author fullname="Edmund Jay" initials="E." surname="Jay">
      <organization abbrev="MGI1">MGI1</organization>

      <address>
        <email>ejay@mgi1.com</email>
      </address>
    </author>

    <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
      <organization abbrev="Salesforce">Salesforce</organization>

      <address>
        <email>cmortimore@salesforce.com</email>
      </address>
    </author>

    <date day="14" month="October" year="2011" />

    <abstract>
      <t>OpenID Connect 1.0 is a simple identity layer on top of OAuth 2.0
      protocol. It allows a web site to verify the identity of the End-User based
      on the authentication performed by the Authorization Server, as well as to
      obtain basic profile information about the End-User in an interoperable and 
      RESTful manner.</t>

      <t>OpenID Connect Basic Client is a profile of the OpenID Connect
      Standard 1.0 Specification that is designed to be easy to read and 
      implement for Relying Parties. OpenID Providers should consult the 
      main specification. This profile omits implementation and security
      considerations for OpenID Providers.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="rnc" title="Requirements Notation and Conventions">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"></xref> .</t>

      <t>Throughout this document, values are quoted to indicate that they are
      to be taken literally. When using these values in protocol messages, the
      quotes MUST NOT be used as part of the value.</t>
    </section>

    <section anchor="terminology" title="Terminology">
      <t>The following definitions define additional terminology used in this
      specification in addition to those defined in <xref
      target="OAuth.2.0">OAuth 2.0</xref>.</t>

      <t><list style="hanging">
          <t hangText="Relying Party (RP)">An application requiring identity
          information from an OpenID Provider.</t>

          <t hangText="OpenID Provider (OP)">A service capable of providing
          identity information to a Relying Party.</t>

          <t hangText="Assertion">A set of Claims about the End-User that are
          attested to by the OpenID Provider and Resource Servers.</t>

          <t hangText="Claim">A piece of information about an Entity that a
          Claims Provider asserts about that Entity.</t>

          <t hangText="Claims Provider">An Authorization Server that can
          return claims about a End-User.</t>

          <t hangText="End-User">A human resource owner.</t>

          <t hangText="Entity">Something that has separate and distinct
          existence and that can be identified in context.</t>

          <t hangText="ID Token">A token that contains information about the
          authentication event. It is a signed token, but can be treated as
          opaque by clients that use the Check ID Endpoint. Relying 
          Parties wanting to process the token directly should refer to the 
          OpenID Connect Standard 1.0 specification.</t>

          <t hangText="Check ID Endpoint">A resource that, when
          presented with an ID Token by the client, returns authentication
          information about the End-User session represented by that ID Token.</t>

          <t hangText="UserInfo Endpoint">A protected resource that, when
          presented with an Access Token by the client, returns authorized
          information about the End-User represented by that Access Token.</t>
        </list></t>
    </section>

    <section title="Protocol Flows">
      <t>Authorization Requests can follow one of two paths; the Implicit Flow
      or the Authorization Code Flow. The Authorization Code Flow is
      suitable for clients that can securely maintain a client secret between
      themselves and the Authorization Server whereas, the Implicit Flow is
      suitable for clients that cannot. Clients that do not support TLS MUST
      use the Authorization Code Flow to prevent the interception of Access 
      Tokens.</t>

      <t>The OpenID Connect Basic Client profile only documents clients using
      the Implicit Flow. OpenID Providers MUST support both flows.
      Clients wanting to use the Authorization Code Flow and OpenID Providers 
      should consult the OpenID Connect Standard 1.0 specification.</t>

      <section title="OpenID Connect Scopes">
        <t>OpenID Connect clients use scopes as defined in 3.3 of 
        <xref target="OAuth.2.0">OAuth 2.0</xref> to specify what
        access privileges are requested for Access Tokens. The scopes associated
        with Access Tokens determine what resources will be available when they are 
        used to access OAuth 2.0 protected endpoints. For OpenID Connect, scopes 
        request what information is to be made available from the UserInfo Endpoint,
        and to request an ID Token.
        OAuth 2.0 allows additional scopes to be specified, as extensions.
        This specification only describes scopes that are part of OpenID Connect.</t>

        <t>OpenID Connect defines the following scopes:</t>

        <t><list style="hanging">
            <t hangText="openid">REQUIRED. Informs the Authorization Server that
            the client is making an OpenID request. If the <spanx style="verb">openid</spanx>
            scope is not specified, the server SHOULD treat the request as a generic 
            OAuth 2.0 request, and perform no OpenID Connect processing.</t>

            <t hangText="profile">OPTIONAL. Requests default profile
            information.</t>

            <t hangText="email">OPTIONAL. Requests an email address.</t>

            <t hangText="address">OPTIONAL. Requests address information.</t>
          </list></t>

        <t>Multiple scopes MAY be requested by creating a space delimited, case
        sensitive list of scope values.</t>
        
        <t>The End-User may decline a scope request by the client.</t>

        <t>To increase conversion, a site may elect to only request a subset
        of the information from the UserInfo Endpoint.</t>

        <t><figure>
            <preamble>The following is a non-normative example of a Scope
            Request.</preamble>

            <artwork><![CDATA[scope=openid profile email phone]]></artwork>
          </figure></t>
      </section>

      <section title="Implicit Flow">
        <t>The Implicit Flow consists of the following steps:</t>

        <t><list style="numbers">
            <t>Client prepares an Authorization Request containing the desired
            request parameters.</t>

            <t>Client sends a request to the Authorization Server.</t>

            <t>Authorization Server authenticates the End-User.</t>

            <t>Authorization Server obtains the End-User
            Consent/Authorization.</t>

            <t>Authorization Server sends the End-User back to the Client with
            an Access Token and ID Token.</t>
          </list></t>

        <section anchor="rf_prep"
                 title="Client Prepares an Authorization Request">
          <t>When the End-User wishes to access a Protected Resource, and the
          End-User Authorization has not yet been obtained, the Client
          prepares an Authorization Request to the Authorization Endpoint.</t>

          <t>The scheme used in the Authorization Endpoint URL MUST be HTTPS.</t>

          <t>Clients MAY construct the request using the HTTP
          <spanx style="verb">GET</spanx> or the HTTP 
          <spanx style="verb">POST</spanx> method as defined in 
          <xref target="RFC2616">RFC 2616</xref>.</t>

          <t>If using the HTTP <spanx style="verb">GET</spanx> method, the
          parameters are serialized using <xref target="qss">Query String 
          Serialization</xref>. If using the HTTP 
          <spanx style="verb">POST</spanx> method, the request parameters are 
          added to the HTTP request entity-body using the 
          <spanx style="verb">application/x-www-form-urlencoded</spanx> format
          as defined by <xref target="W3C.REC-html401-19991224"></xref>.</t>


          <t>This profile further constrains the following request
          parameters:</t>

          <t><list style="hanging">
              <t hangText="response_type">It MUST include 
              <spanx style="verb">token</spanx> and
              <spanx style="verb">id_token</spanx>,
              as a space separated list. This requests both an access_token
              and id_token to be returned in the URL fragment of the
              response.</t>
            </list></t>

          <t>Other REQUIRED parameters in the request include the
          following:</t>

          <t><list style="hanging">
              <t hangText="client_id">The OAuth Client Identifier.</t>

              <t hangText="scope">It MUST include <spanx style="verb">openid</spanx>
              as one of the space separated strings. Optional scope strings of
              <spanx style="verb">profile</spanx>, <spanx style="verb">email</spanx>,
              and <spanx style="verb">address</spanx> are also supported.</t>

              <t hangText="redirect_uri">A redirection URI where the response
              will be sent. This MUST be pre-registered with the provider.</t>
            
              <t hangText="nonce">A random, unique string value used to
              mitigate the replay attack. This value is returned from the Check
              ID Endpoint.</t>
            </list></t>

          <t>The request MAY contain the following optional parameters:</t>

          <t><list style="hanging">
              <t hangText="state">RECOMENDED. An opaque value used to maintain
              state between the request and the callback, used to protect
              against XSRF attacks.</t>

              <t hangText="display">A string value that specifies
              how the Authorization Server displays the authentication page to
              the End-User. The following values are supported:<list style="hanging">
                  <t hangText="none">This value informs the Authorization Server
                  that it MUST NOT display any authentication or confirmation
                  user interface pages. An error is returned if either the End-User 
                  is not already authenticated or the client does not have 
                  pre-configured approval for the requested
                  <spanx style="verb">scopes</spanx>. This can be used as a
                  method to check for existing authentication and/or approval.</t>
                </list></t>

              <t hangText="prompt">A space delimited, case sensitive list of
              string values that specifies how the Authorization Server prompts
              the End-User for reauthentication and reapproval. The possible values
              are:<list style="hanging">
                  <t hangText="login">The Authorization Server MUST prompt the
                  End-User for reauthentication.</t>

                  <t hangText="consent">The Authorization Server MUST prompt
                  the End-User for reapproval before returning information to the
                  client.</t>

                  <t hangText="select_account">The Authorization Server MUST
                  prompt the End-User to select a user account if the account has
                  multiple accounts associated with it.</t>
                </list>
                This can be used by the client to make sure that the End-User is
                still present for the current session or to bring attention to the
                request. If this parameter is used in conjunction with the 
                <spanx style="verb">display</spanx> parameter set to "none", an
                error is returned.
            </t>
            </list></t>

          <figure>
            <preamble>The following is a non-normative example of an
            Authorization Request URL. Note that the line wraps within the
            values are for display purpose only:</preamble>

            <artwork><![CDATA[https://server.example.com/authorize?
response_type=token%20id_token
&client_id=s6BhdRkqt3
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
&scope=openid%20profile
&state=af0ifjsldkj
&nonce=n-0S6_WzA2Mj]]></artwork>
          </figure>
        </section>

        <section anchor="implicit_req"
                 title="Client sends a request to the Authorization Server">
          <t>Having constructed the Authorization Request, the client sends it
          to the Authorization Endpoint. This MAY happen via HTTPS redirect, 
          hyperlinking, or any other secure means of directing the User-Agent 
          to the URL.</t>

          <t>Following is a non-normative example using HTTP redirect. Note:
          Line wraps are for display purpose only.</t>

          <figure>
            <artwork><![CDATA[HTTP/1.1 302 Found
Location: https://server.example.com/authorize?
response_type=token%20id_token
&client_id=s6BhdRkqt3
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
&scope=openid%20profile
&state=af0ifjsldkj
&nonce=n-0S6_WzA2Mj]]></artwork>
          </figure>
        </section>

        <section title="Authorization Server Obtains the End-User Consent/Authorization">
          <t>The Authorization Server obtains an authorization decision,
          for the requested scopes. This can done by presenting the End-User
          with a dialogue that allows the End-User to recognize what he is
          consenting to and obtain his consent or by establishing approval via
          other means (for example, via previous administrative approval).</t>

          <t>The <spanx style="verb">openid</spanx> scope grants the RP access
          to the user identifier of the authenticated End-User of the session.</t>

          <t>All other scopes are optional. It is up to the OpenID Provider
          to determine if an error should be returned in the case of the End-User 
          declining to authorize scopes other than 
          <spanx style="verb">openid</spanx>.</t>
        </section>

        <section anchor="implicit_res"
                 title="Authorization Server Sends the End-User Back to the Client">
          <t>Once the authorization is determined, the Authorization Server
          returns a positive or negative response.</t>

          <section anchor="implicit_ok" title="End-User Grants Authorization">
            <t>If the resource owner grants the access request, the
            Authorization Server issues an Access Token and delivers it to the
            client by adding the following parameters to the fragment
            component of the redirection URI using the 
            <spanx style="verb">application/x-www-form-urlencoded</spanx>
            format as defined in Section 4.2.2 of
            <xref target="OAuth.2.0">OAuth 2.0</xref></t>

            <t>In the Implicit Flow, the entire response is returned in the
            fragment component of the redirect URL, as defined in 4.2.2 of
            <xref target="OAuth.2.0">OAuth 2.0</xref></t>

            <t><list style="hanging">
                <t hangText="access_token">REQUIRED. The Access Token for the
                UserInfo Endpoint.</t>

                <t hangText="token_type">REQUIRED. The value MUST be
                "bearer"</t>

                <t hangText="id_token">REQUIRED. The ID Token for the
                Check ID Endpoint.</t>

                <t hangText="state">REQUIRED if the 
                <spanx style="verb">state</spanx> parameter is present in the
                request. Clients MUST verify that the 
                <spanx style="verb">state</spanx> value is equal to the exact 
                value of <spanx style="verb">state</spanx> parameter in the 
                Authorization Request.</t>

                <t hangText="expires_in">OPTIONAL. The expiration time in
                seconds of the access_token</t>
              </list></t>

            <t>The client can then use the Access Token to access protected
            resources at Resource Servers.</t>

            <figure>
              <preamble>The following is a non-normative example. Line wraps
              after the second line is for the display purpose
              only:</preamble>

              <artwork><![CDATA[HTTP/1.1 302 Found
Location: https://client.example.com/#
access_token=SlAV32hkKG
&token_type=bearer
&id_token=1234567.SlAV32hkKG.abcde1234
&expires_in=3600
&state=af0ifjsldkj]]></artwork>
            </figure>
          </section>

          <section anchor="implicit_authz_error"
                   title="End-User Denies Authorization or Invalid Request">
            <t>If the End-User denies the authorization or the End-User authentication
            fails, the Authorization Server MUST return the negative 
            authorization response as defined in 4.2.2.1 of 
            <xref target="OAuth.2.0">OAuth 2.0</xref>. No other parameters 
            SHOULD be returned.</t>
          </section>
        </section>
      </section>

      <section title="Check ID Endpoint">
        <t>The Check ID Endpoint validates the id_token and returns a
        text <xref target="RFC4627">JSON</xref> object which contains
        information about the End-User session associated with the supplied
        id_token.</t>

        <t>Clients MUST verify the validity of the id_token using the Check ID
        Endpoint.</t>

        <t>The id_token is used to manage the signon event and user
        identifier, separately from access to the UserInfo Endpoint and other
        OAuth 2.0 protected resources that the End-User is granting access to. The
        id_token is audience restricted to a particular client via the audience 
        and nonce.</t>

        <t>A full explanation of how to use the id_token to perform session
        management can be found in the <xref target="OpenID.Session">OpenID
        Connect Session Management 1.0</xref></t>

        <section title="Check ID Request">
          <t>To request the information about the authentication performed on
          the End-User and verify the id_token, the following parameters MAY be sent
          to the Check ID Endpoint as query parameters in a GET or as form
          encoded in a POST request:</t>

          <t><list style="hanging">
              <t hangText="id_token">REQUIRED. The id_token obtained from
              an OpenID Connect authorization request. </t>
            </list><figure>
              <preamble>The following is a non-normative example of a request
              to the Check ID Endpoint:</preamble>

              <artwork><![CDATA[Request:

GET /op/check_id?id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6
ImNsaWVudC5leGFtcGxlLmNvbSJ9.eyJpc3N1ZXIiOiJodHRwOlwvXC9zZXJ2ZXIuZXhhbXBs
ZS5jb20iLCJjbGllbnRfaWQiOiJjbGllbnQuZXhhbXBsZS5jb20iLCJhdWRpZW5jZSI6ImNsa
WVudC5leGFtcGxlLmNvbSIsImlkIjoidXNlcl8yMzQyMzQiLCJleHAiOjEzMDM4NTI4ODB9.a
JwagC6501Da-zK-X8Az9B-Y625aSEfxVuBpFEDjOxQ

Host: server.example.com


]]></artwork>
            </figure></t>

          <section title="Request Verification">
            <t>Clients MUST verify the request with the following:</t>

            <t><list style="numbers">
                <t>When connecting to the Endpoint, verify that TLS/SSL server
                certificate matches that of the Endpoint.</t>

                <t>Make sure that the Endpoint that the client connected to is 
                a trusted Check ID Endpoint for the Entity via pre-configuration
                meta-data or discovery.</t>
              </list></t>
          </section>
        </section>

        <section title="Check ID Response">
          <t>The response is a text <xref target="RFC4627">JSON</xref> object
          using the <spanx style="verb">application/json</spanx> media type
          with the following parameters.</t>

          <t><list style="hanging">
              <t hangText="iss">REQUIRED. The unique identifier of the issuer
              of the response.</t>

              <t hangText="user_id">REQUIRED. A locally unique and never
              reassigned identifier for the End-User, which is intended to be
              consumed by the Client. e.g. <spanx style="verb">24400320</spanx>
              or <spanx style="verb">AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4</spanx>.
              It MUST NOT exceed 255 ASCII characters in length.</t>

              <t hangText="aud">REQUIRED. This member identifies the audience
              that this ID Token is intended for. It is client_id of the RP.</t>

              <t hangText="exp">REQUIRED. Type Integer. Identifies the
              expiration time on or after which the ID Token MUST NOT be
              accepted for processing. The processing of this parameter
              requires that the current date/time MUST be before the
              expiration date/time listed in the value. Implementers MAY
              provide for some small leeway, usually no more than a few
              minutes, to account for clock skew. The value is number of
              seconds from 1970-01-01T0:0:0Z as measured in UTC until the
              desired date/time. See <xref target="RFC3339">RFC 3339</xref>
              for details regarding date/times in general and UTC in
              particular.</t>

              <t hangText="iso29115">OPTIONAL. (entity authentication
              assurance): Specifies the X.eaa / <xref
              target="ISO29115">ISO/IEC29115</xref> entity authentication
              assurance level of the authentication performed.</t>

              <t hangText="nonce">REQUIRED. Clients MUST verify that the 
              <spanx style="verb">nonce</spanx> value is equal to the exact 
              value of <spanx style="verb">nonce</spanx> parameter in the 
              Authorization Request.</t>
            </list></t>

          <figure>
            <preamble>The following is a non-normative example of a request to
            the Check ID Endpoint:</preamble>

            <artwork><![CDATA[Request:

GET /op/check_id?id_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiIsImtpZCI6
ImNsaWVudC5leGFtcGxlLmNvbSJ9.eyJpc3N1ZXIiOiJodHRwOlwvXC9zZXJ2ZXIuZXhhbXBs
ZS5jb20iLCJjbGllbnRfaWQiOiJjbGllbnQuZXhhbXBsZS5jb20iLCJhdWRpZW5jZSI6ImNsa
WVudC5leGFtcGxlLmNvbSIsImlkIjoidXNlcl8yMzQyMzQiLCJleHAiOjEzMDM4NTI4ODB9.a
JwagC6501Da-zK-X8Az9B-Y625aSEfxVuBpFEDjOxQ

Host: server.example.com

Response:

HTTP/1.1 200 OK
Content-Type: application/json

{
 "iss": "http://server.example.com",
 "user_id": "AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4",
 "aud": "http://client.example.com",
 "exp": 1311281970
}
]]></artwork>
          </figure>

          <section title="Response Verification">
            <t>To verify the validity of the Response, the client MUST do the
            following:</t>

            <t><list style="numbers">
                <t>The Check ID Endpoint has not returned an error for
                the ID Token being expired or invalid.</t>

                <t>Check that the <spanx style="verb">iss</spanx> is equal to 
                that of the pre-configured or discovered Issuer Identifier for 
                the user session. </t>

                <t>Check that the returned <spanx style="verb">nonce</spanx> is
                equal to the <spanx style="verb">nonce</spanx> in the
                Authorization Request.</t>

                <t>Verify that the <spanx style="verb">aud</spanx> (audience) 
                contained within the response is the client's
                <spanx style="verb">client_id</spanx>.</t>
            </list></t>
          </section>
        </section>

        <section title="Error Codes">
          <t>In addition to the error codes defined in Section 5.2 of <xref
          target="OAuth.2.0">OAuth 2.0</xref>, this specification defines the
          following error codes.</t>

          <t><list style="hanging">
              <t hangText="invalid_id_token">The ID Token is not valid for the
              requested resource, malformed, is in an incorrect format, or
              expired.</t>
            </list></t>
        </section>
      </section>
    </section>

    <section anchor="userinfo" title="UserInfo Endpoint">
      <t>To obtain the additional attributes and tokens, the client makes a
      GET or POST request to the UserInfo Endpoint.</t>

      <t>NOTE: The UserInfo Endpoint response is not guaranteed to be about the
      Subject in the session. Therefore, it MUST NOT be used as an assertion
      about the End-User in the session unless the user_id matches the user_id in
      the ID Token.</t>

      <section title="Requesting UserInfo">
        <t>Clients MAY send requests with the following parameters to the
        UserInfo Endpoint to obtain further information about the End-User. The
        UserInfo Endpoint is an <xref target="OAuth.2.0">OAuth 2.0</xref>
        protected resource that complies with the <xref
        target="OAuth.2.0.Bearer">Bearer Token</xref> specification. As such,
        the Access Token SHOULD be specified via the HTTP Authorization
        header.</t>

        <t><list style="hanging">
            <t hangText="access_token">REQUIRED. The access_token obtained
            from an OpenID Connect Authorization Request. This parameter MUST
            only be sent using one method through either HTTP Authorization
            header or query string.</t>

            <t hangText="schema">REQUIRED. The schema in which the data is to
            be returned. The only defined value is <spanx style="verb">openid</spanx>.
            If the value of this parameter is omitted, or not
            <spanx style="verb">openid</spanx>, the response may be a
            proprietary schema to support backwards compatibility. 
            A URL MAY be passed to define custom schemes not specified
            by short names.  Custom scheme names and responses are out
            of scope for this specification.</t>

            <t hangText="id">This identifier is reserved for backwards
            compatibility. It MUST be ignored by the endpoint if the <spanx
            style="verb">openid</spanx> schema is used.</t>
          </list></t>

        <figure>
          <preamble>The following is a non-normative example. Line wraps are
          for display purpose only:</preamble>

          <artwork><![CDATA[GET /userinfo HTTP/1.1
Host: server.example.com
Authorization: Bearer vF9dft4qmT
]]></artwork>
        </figure>
      </section>

      <section anchor="id_res" title="Client Receives UserInfo Response">
        <t>If the requested schema is <spanx style="verb">openid</spanx>, the
        response MUST return a plain text <xref target="RFC4627">JSON</xref>
        structure that contains a set of members that are a subset of those
        defined below. Additional members (not specified below) MAY also be
        returned.</t>

        <t>The members may be represented in multiple languages and scripts.
        To specify the languages and scripts, <xref
        target="RFC5646">BCP47</xref> language tags MUST be added to each
        member names delimited by a <spanx style="verb">#</spanx>, e.g.,
        <spanx style="verb">familyName#ja-Kana-JP</spanx> for expressing
        Family Name in Katakana in Japanese, which is commonly used to index
        and represent the phonetics of the Kanji representation of the same
        represented as <spanx style="verb">familyName#ja-Hani-JP</spanx>.</t>

        <texttable anchor="ClaimTable" title="Reserved Member Definitions">
          <ttcol align="left">Member</ttcol>

          <ttcol align="left">Type</ttcol>

          <ttcol align="left">Description</ttcol>

          <c>user_id</c>

          <c>string</c>

          <c>Identifier for the End-User at the issuer.</c>

          <c>name</c>

          <c>string</c>

          <c>End-User's full name in displayable form including all name parts,
          ordered according to End-User's locale and preferences.</c>

          <c>given_name</c>

          <c>string</c>

          <c>Given name or first name of the End-User.</c>

          <c>family_name</c>

          <c>string</c>

          <c>Surname or last name of the End-User.</c>

          <c>middle_name</c>

          <c>string</c>

          <c>Middle name of the End-User.</c>

          <c>nickname</c>

          <c>string</c>

          <c>Casual name of the End-User that may or may not be the same as the
          <spanx style="verb">given_name</spanx>. For instance, a <spanx
          style="verb">nickname</spanx> value of <spanx style="verb">Mike</spanx>
          might be returned alongside a <spanx style="verb">given_name</spanx>
          value of <spanx style="verb">Michael</spanx>.</c>

          <c>profile</c>

          <c>string</c>

          <c>URL of End-User's profile page.</c>

          <c>picture</c>

          <c>string</c>

          <c>URL of the End-User's profile picture.</c>

          <c>website</c>

          <c>string</c>

          <c>URL of End-User's web page or blog.</c>

          <c>email</c>

          <c>string</c>

          <c>The End-User's preferred e-mail address.</c>

          <c>verified</c>

          <c>boolean</c>

          <c>True if the End-User's e-mail address has been verified; otherwise
          false.</c>

          <c>gender</c>

          <c>string</c>

          <c>The End-User's gender: <spanx style="verb">female</spanx> or <spanx
          style="verb">male</spanx>.</c>

          <c>birthday</c>

          <c>string</c>

          <c>The End-User's birthday, represented as a date string in MM/DD/YYYY
          format. The year MAY be <spanx style="verb">0000</spanx>, indicating
          that it is omitted.</c>

          <c>zoneinfo</c>

          <c>string</c>

          <c>String from zoneinfo <xref target="zoneinfo"></xref> timezone
          database. For example, <spanx style="verb">Europe/Paris</spanx> or
          <spanx style="verb">America/Los_Angeles</spanx>.</c>

          <c>locale</c>

          <c>string</c>

          <c>The End-User's locale, represented as an <xref target="RFC5646">RFC
          5646</xref> language tag. This is typically an <xref
          target="ISO639-1">ISO 639-1 Alpha-2</xref> language code in
          lowercase and an <xref target="ISO3166-1">ISO 3166-1 Alpha-2</xref>
          country code in uppercase, separated by a dash. For example, <spanx
          style="verb">en-US</spanx> or <spanx style="verb">fr-CA</spanx>. As
          a compatibility note, some implementations have used an underscore
          as the separator rather than a dash, for example, <spanx
          style="verb">en_US</spanx>; Implementations MAY choose to accept
          this locale syntax as well.</c>

          <c>phone_number</c>

          <c>string</c>

          <c>The End-User's preferred telephone number. For example, <spanx
          style="verb">+1 (425)
          555-1212</spanx> or <spanx style="verb">+56 (2) 687 2400</spanx>.</c>

          <c>address</c>

          <c>JSON object</c>

          <c>The End-User's preferred address. The value of the <spanx
          style="verb">address</spanx> member is a <xref
          target="RFC4627">JSON</xref> structure containing some or all of
          these string-valued fields: <spanx style="verb">formatted</spanx>,
          <spanx style="verb">street_address</spanx>, <spanx style="verb">locality</spanx>,
          <spanx style="verb">region</spanx>, <spanx style="verb">postal_code</spanx>,
          and <spanx style="verb">country</spanx>. The <spanx style="verb">street_address</spanx>
          field MAY contain multiple lines if the address representation
          requires it. Implementations MAY return only a subset of the fields
          of an <spanx style="verb">address</spanx>, depending upon the
          information available and the End-User's privacy preferences. For
          example, the <spanx style="verb">country</spanx> and <spanx
          style="verb">region</spanx> might be returned without returning more
          fine-grained address information.</c>

          <c>updated_time</c>

          <c>string</c>

          <c>Time the End-User's information was last updated, represented as a
          <xref target="RFC3339">RFC 3339</xref> datetime. For example, <spanx
          style="verb">2011-01-03T23:58:42+0000</spanx>.</c>
        </texttable>

        <figure>
          <preamble>Following is a non-normative example of such
          response:</preamble>

          <artwork><![CDATA[{
 "name": "Jane Doe"
 "given_name": "Jane",
 "family_name": "Doe",
 "email": "janedoe@example.com",
 "picture": "http://example.com/janedoe/me.jpg"
}]]></artwork>
        </figure>

        <section title="Error Response">
          <t>When some error condition arises, the UserInfo Endpoint returns
          the Error Response. In addition to the standard <xref
          target="OAuth.2.0">OAuth 2.0</xref> errors, the UserInfo Endpoint
          may return the following errors:</t>

          <t><list style="hanging">
              <t hangText="unsupported_schema">The requested schema is
              unsupported.</t>
            </list></t>
        </section>
      </section>
    </section>

    <section anchor="disco_reg" title="Discovery and Registration">
      <t>Some OpenID Connect installations can use a pre-configured set of
      OpenID Providers and/or Relying Parties. In those cases, it may not be
      necessary to support dynamic discovery of information about identities
      or services or dynamic registration of clients.</t>

      <t>However, if installations choose to support unanticipated
      interactions between Relying Parties and OpenID Providers that do not
      have pre-configured relationships, they SHOULD accomplish this by
      implementing the facilities defined in the <xref
      target="OpenID.Discovery">OpenID Connect Discovery 1.0</xref> and <xref
      target="OpenID.Registration">OpenID Connect Dynamic Client Registration
      1.0</xref> specifications.</t>
    </section>

    <section anchor="qss" title="Query String Serialization">
      <t>In order to serialize the parameters using the query string
      serialization, the client constructs the string by adding the
      parameters and values to the query component using the <spanx
      style="verb">application/x-www-form-urlencoded</spanx> format as
      defined by <xref target="W3C.REC-html401-19991224"></xref>.</t>

      <figure>
        <preamble>Following is a non-normative example of such
        serialization:</preamble>

        <artwork><![CDATA[GET /authorize?scope=openid&response_type=code
&client_id=s6BhdRkqt3
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
Host: server.example.com]]></artwork>
      </figure>
    </section>

    <section anchor="security_considerations" title="Security Considerations">
      <t>In addition to the Security Considerations in <xref
      target="OAuth.2.0"> OAuth 2.0</xref>, the following are the list of 
      threats and remedies that were considered for this specification.</t>

      <section anchor="assertion_manufacture"
               title="Assertion Manufacture/Modification">
        <t>An assertion is the result of the authentication performed by the
        Authorization Server that was provided to the client. The assertion is 
        used to pass information about the End-User or the authentication process 
        from the Authorization Server to the client.</t>


            <t>To mitigate this attack, the assertion may be sent over a
            protected channel such as TLS/SSL. In order to protect the
            integrity of assertions from malicious attack, the Authorization 
            Server MUST be authenticated. In this specification, the assertion 
            is always sent over TLS/SSL protected channel.</t>


        <t>For details of the threat, see <xref target="SP800-63"></xref>.</t>
      </section>

      <section anchor="assertion_disclosure" title="Assertion Disclosure">
        <t>This profile is subject to assertion disclosure in the End-User's
        browser, if it is compromised. Other OpenID Connect profiles should be
        used if this threat needs to be mitigated.</t>

        <t>For details of the threat, see <xref target="SP800-63"></xref>.</t>
      </section>

      <section anchor="assertion_redirect" title="Assertion Redirect">
        <t>To mitigate this threat, the assertion includes the identity of the
        client for whom it was generated as <spanx style="verb">client_id</spanx>.
        The client verifies that incoming assertions include its identity as
        the recipient of the assertion.</t>

        <t>For details of the threat, see <xref target="SP800-63"></xref>.</t>
      </section>

      <section anchor="assertion_reuse" title="Assertion Reuse">
        <t>The assertion includes a timestamp and a short lifetime of
        validity. The client checks the timestamp and lifetime values to
        ensure that the assertion is currently valid.</t>

        <t>The use of a nonce in the request is REQUIRED. The response from
        the Check ID Endpoint contains the nonce sent in the Authorization
        Request. This SHOULD be checked against a list of already received ID
        assertions to check for replays.</t>

        <t>For details of the threat, see <xref target="SP800-63"></xref>.</t>
      </section>

      <section anchor="assertion_substitution" title="Assertion Substitution">
        <t>Responses to assertion requests is bound to the corresponding
        requests by message order in HTTP, as both assertions and requests are
        protected by TLS that can detect and disallow malicious reordering of
        packets.</t>

        <t>For details of the threat, see <xref target="SP800-63"></xref>.</t>
      </section>

      <section anchor="auth_req_disclosure"
               title="Authentication Request Disclosure">
        <t>Since the authentication request is sent over a protected channel,
        the disclosure may only happen at the User-Agent where the information
        is decrypted.</t>

        <t>For details of the threat, see <xref target="SP800-63"></xref>.</t>
      </section>

      <section anchor="authn_proc_threats"
               title="Authentication Process Threats">
        <t>In the category of Authentication Process Threats, the following
        threats exist:</t>

        <t><list style="symbols">
            <t>Online Guessing</t>

            <t>Phishing</t>

            <t>Pharming</t>

            <t>Eavesdropping</t>

            <t>Replay</t>

            <t>Session Hijacking</t>

            <t>Man-in-the-Middle</t>
          </list> The authentication process, per se, as described in <xref
        target="SP800-63"></xref> is out of scope for this protocol, but care
        SHOULD be taken to achieve appropriate protection.</t>

        <t>For details of the threat, see <xref target="SP800-63"></xref>.</t>
      </section>

      <section title="Implicit Flow Threats">
        <t>In the Implicit Flow, the Access Token is returned in the
        fragment part of the client's redirect_uri through HTTPS. Thus it is
        protected between the Authorization Server and the User-Agent, and 
        User-Agent and the Client. The only the place it can be captured is the 
        User-Agent where the TLS session is terminated, and is possible if the 
        User-Agent is infested by malware.</t>
      </section>

      <section title="Availability">
        <t>When the Authorization Server is down, End-Users will likely be unable 
        to access it. To mitigate this risk, the client SHOULD allow End-Users to
        associate multiple Authorization Servers.</t>
      </section>
    </section>

    <section anchor="privacy_considerations" title="Privacy Considerations">
      <t>The UserInfo response typically contains Personally Identifiable
      Information. As such, End-User consent for the release of the information
      for the specified purpose SHOULD be obtained at or prior to the
      authorization time in accordance with relevant regulations. The purpose
      of use is typically registered in association with the <spanx
      style="verb">redirect_uri</spanx>.</t>

      <t>Only necessary UserInfo data should be stored at the client and the
      client SHOULD associate the received data with the purpose of use
      statement.</t>

      <t>The Resource Server SHOULD make the UserInfo access log available to 
      the End-User so that the End-User can monitor who accessed his data.</t>

      <t>To protect the End-User from a possible correlation among clients, the
      use of a Pairwise Pseudonymous Identifier (PPID) as the <spanx
      style="verb">user_id</spanx> SHOULD be considered.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document makes no request of IANA.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119"?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml' ?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.3339"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5646"?>

      <reference anchor="ISO29115">
        <front>
          <title>ITU-T Recommendation X.eaa | ISO/IEC 2nd CD 29115 --
          Information technology - Security techniques - Entity authentication
          assurance framework</title>

          <author fullname="Erika McCallister et al." initials="E"
                  surname="McCallister">
            <organization>National Institute of Standards and
            Technology</organization>
          </author>
        </front>

        <seriesInfo name="ISO/IEC" value="29115" />

        <!-- <annotation>Defines LoA</annotation> -->
      </reference>

      <reference anchor="SP800-63">
        <front>
          <title>NIST SP800-63rev.1: Electronic Authentication
          Guideline</title>

          <author>
            <organization>National Institute of Standards and
            Technology</organization>
          </author>
        </front>

        <seriesInfo name="NIST" value="SP800-63" />

        <format target="http://csrc.nist.gov/publications/drafts/800-63-rev1/SP800-63-Rev1-Draft3_June2011.pdf"
                type="PDF" />

        <!-- <annotation>Defines LoA</annotation> -->
      </reference>

      <reference anchor="OAuth.2.0">
        <front>
          <title>OAuth 2.0 Authorization Protocol</title>

          <author fullname="Eran Hammer-Lahav" initials="E." role="editor"
                  surname="Hammer-Lahav">
            <organization abbrev="Yahoo">Yahoo</organization>
          </author>

          <author fullname="David Recordon" initials="D." surname="Recordon">
            <organization abbrev="Facebook">Facebook</organization>
          </author>

          <author fullname="Dick Hardt" initials="D." surname="Hardt">
            <organization abbrev="Microsoft">Microsoft</organization>
          </author>

          <date day="22" month="September" year="2011" />
        </front>

        <format target="http://tools.ietf.org/html/draft-ietf-oauth-v2"
                type="HTML" />
      </reference>

      <reference anchor="OAuth.2.0.Bearer">
        <front>
          <title>The OAuth 2.0 Protocol: Bearer Tokens</title>

          <author fullname="Michael B. Jones" initials="M." role="editor"
                  surname="Jones">
            <organization abbrev="Microsoft">Microsoft
            Corporation</organization>
          </author>

          <author fullname="David Recordon" initials="D." surname="Recordon">
            <organization abbrev="Facebook">Facebook</organization>
          </author>

          <author fullname="Dick Hardt" initials="D." surname="Hardt">
            <organization abbrev="Independent">Independent</organization>
          </author>

          <date day="22" month="September" year="2011" />
        </front>

        <format target="http://tools.ietf.org/html/draft-ietf-oauth-v2-bearer"
                type="HTML" />
      </reference>

      <reference anchor="ISO639-1">
        <front>
          <title>ISO 639-1:2002. Codes for the representation of names of
          languages -- Part 1: Alpha-2 code</title>

          <author fullname="International Organization for Standardization"
                  initials="" surname="">
            <organization abbrev="ISO">International Organization for
            Standardization</organization>
          </author>

          <date year="2002" />
        </front>
      </reference>

      <reference anchor="ISO3166-1">
        <front>
          <title>ISO 3166-1:1997. Codes for the representation of names of
          countries and their subdivisions -- Part 1: Country codes</title>

          <author fullname="International Organization for Standardization"
                  initials="" surname="">
            <organization abbrev="ISO">International Organization for
            Standardization</organization>
          </author>

          <date year="1997" />
        </front>

        <format target="http://www.w3.org/WAI/ER/IG/ert/iso639.htm"
                type="HTML" />
      </reference>

      <reference anchor="zoneinfo">
        <front>
          <title>The tz database</title>

          <author fullname="" initials="" surname="">
            <organization abbrev="Public">Public Domain</organization>
          </author>

          <date month="June" year="2011" />
        </front>

        <format target="http://www.twinsun.com/tz/tz-link.htm" type="HTML" />
      </reference>

      <reference anchor="OpenID.Discovery">
        <front>
          <title>OpenID Connect Discovery 1.0</title>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute,
            Ltd.</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Protiviti">Protiviti Government
            Services</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft</organization>
          </author>

          <author fullname="Edmund Jay" initials="E." surname="Jay">
            <organization abbrev="MGI1">MGI1</organization>
          </author>

          <date day="30" month="September" year="2011" />
        </front>

        <format target="http://openid.net/specs/openid-connect-discovery-1_0.html"
                type="HTML" />
      </reference>

      <reference anchor="OpenID.Registration">
        <front>
          <title>OpenID Connect Dynamic Client Registration 1.0</title>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute,
            Ltd.</organization>
          </author>

          <author fullname="John Bradley" initials="J." role="editor"
                  surname="Bradley">
            <organization abbrev="Protiviti">Protiviti Government
            Services</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft
            Corporation</organization>
          </author>

          <date day="30" month="September" year="2011" />
        </front>

        <format target="http://openid.net/specs/openid-connect-registration-1_0.html"
                type="HTML" />
      </reference>

      <reference anchor="OpenID.Session">
        <front>
          <title>OpenID Connect Session Management 1.0</title>

          <author fullname="Breno de Medeiros" initials="B."
                  surname="de Medeiros">
            <organization abbrev="Google">Google</organization>

            <address>
              <email>breno@google.com</email>
            </address>
          </author>

          <date day="2" month="September" year="2011" />
        </front>

        <format target="http://openid.net/specs/openid-connect-session-1_0.html"
                type="HTML" />
      </reference>
    </references>

    <section title="Acknowledgements">
      <t>The OpenID Community would like to thank the following people for the
      work they've done in the drafting and editing of this specification.</t>

      <t><list style="empty">
          <t>Axel Nennker (axel.nennker@telekom.de), Deutsche Telekom</t>

          <t>Casper Biering (cb@peercraft.com), Peercraft</t>

          <t>John Bradley (jbradely@mac.com), Protiviti Government
          Services</t>

          <t>Breno de Medeiros (breno@gmail.com), Google</t>

          <t>George Fletcher (gffletch@aol.com), AOL</t>

          <t>Edmund Jay (ejay@mgi1.com), MGI1</t>

          <t>Michael B. Jones (mbj@microsoft.com), Microsoft</t>

          <t>Chuck Mortimore (cmortimore@salesforce.com), Salesforce</t>

          <t>Hideki Nara (hideki.nara@gmail.com), Takt Communications</t>

          <t>Nat Sakimura (n-sakimura@nri.co.jp)), Nomura Research Institute,
          Ltd.</t>

          <t>Ryo Itou (ritou@yahoo-corp.jp), Yahoo! Japan</t>
        </list></t>
    </section>

    <section title="Document History">
      <t>[[ To be removed from the final specification ]]</t>
      
       <t>-14<list style="symbols">
          <t>Changed section 3.2.1 to refer to access_token ticket #134.</t>
           <t>Bumped version + date.</t>
           <t>Changed 7.4 in security considerations to show none is REQUIRED.</t>
           <t>Changed 3.2.4.1 User Info to UserInfo per Ticket #137.</t>
           <t>Changed formatting of 7.1 per ticket #140.</t>
        </list></t>

      <t>-13<list style="symbols">
          <t>Changed check_session to check_id.</t>

	  <t>schema=openid now required when requesting UserInfo.</t>

          <t>Removed issued_to, since not well defined.</t>

          <t>Removed display values popup, touch, and mobile, since not well defined.</t>
        </list></t>

      <t>-12<list style="symbols">
          <t>Ticket #48 Changed Check Session to take the id_token as a
          parameter.</t>
        </list></t>

      <t>-11 <list style="symbols">
          <t>Renamed from "Lite" to "Basic Client".</t>

          <t>Numerous cleanups, including updating references.</t>
        </list></t>

      <t>-10 <list style="symbols">
          <t>Add back id_token to the response type per issue 27.</t>

          <t>Changed endpoint name in example from id_token to
          check_session.</t>

          <t>Added token_type to the response and explanations of the optional
          parameters.</t>
        </list></t>

      <t>-09 <list style="symbols">
          <t>Clean up typos.</t>

          <t>Clean up scope explanation.</t>

          <t>Fix 3.2.4.1 to include id_token in response.</t>
        </list></t>

      <t>-08 <list style="symbols">
          <t>Added note about OP needing to read the full spec.</t>

          <t>Reverted back to GET for introspection based on Google
          feedback.</t>

          <t>Changed scopes to <spanx style="verb">openid</spanx>, <spanx
          style="verb">profile</spanx>, <spanx style="verb">address</spanx>,
          and <spanx style="verb">email</spanx> to make them additive.</t>

          <t>Changed introspection to Check Session Endpoint to be consistent
          with session management.</t>

          <t>Changed validation rules, the Check session endpoint will return
          an error for expired or invalid tokens, so the client doesn't need
          to check expiration.</t>

          <t>Added explanation of why an id_token is used to verify identity
          rather than the user_info Access Token.</t>
        </list></t>

      <t>-07 <list style="symbols">
          <t>Changed introspection to post</t>

          <t>Changed user_info from <spanx style="verb">ide</spanx> to <spanx
          style="verb">user_ide</spanx> to be consistent with introspection
          endpoint.</t>

          <t>Fixed introspection example to use id_token rather than access
          token.</t>

          <t>Removed asking for id_token in response type.</t>

          <t>Fixed Sec 3 to be clear it is client secret that is maintained
          between the client and the OP.</t>
        </list></t>

      <t>-06 <list style="symbols">
          <t>Only require the <spanx style="verb">token</spanx> flow in Lite.
          Removed <spanx style="verb">code</spanx> flow.</t>

          <t>Make <spanx style="verb">id_token</spanx> required. The <spanx
          style="verb">id_token</spanx> is treated as opaque.</t>

          <t>Rearranged sections for readability.</t>

          <t>Dropped the <spanx style="verb">schema</spanx> parameter to the
          Introspection endpoint, which was formerly a string with the value
          <spanx style="verb">user_id</spanx>. This is unnecessary since the
          <spanx style="verb">id_token</spanx> parameter already can be used
          to disambiguate the intended uses(s) of the endpoint.</t>

          <t>Dropped the requested audience from the Lite spec, which was
          formerly the identifier of the target audience of the response. This
          could be part of the Standard spec, but is an advanced scenario, and
          so not appropriate for Lite.</t>

          <t>Reference the Discovery and Registration specs, since they're
          needed for interaction between non-pre-configured parties (so that
          OpenID Connect installations can be Open).</t>
        </list></t>

      <t>-05 <list style="symbols">
          <t>Corrected issues raised by Casper Biering.</t>

          <t>Created the OpenID Connect Lite specification.</t>
        </list></t>

      <t>-04 <list style="symbols">
          <t>Correct issues raised by Pam Dingle and discussed on the mailing
          list after the 7-Jul-11 working group call.</t>

          <t>Adopted long_names.</t>
        </list></t>

      <t>-03 <list style="symbols">
          <t>Correct issues raised by Johnny Bufu and discussed on the
          7-Jul-11 working group call.</t>
        </list></t>

      <t>-02 <list style="symbols">
          <t>Consistency and cleanup pass, including removing unused
          references.</t>
        </list></t>

      <t>-01 <list style="symbols">
          <t>Initial draft</t>
        </list></t>
    </section>
  </back>
</rfc>
