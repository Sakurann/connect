<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd">
<rfc category="exp" docName="openid-connect-mesages-1_0" ipr="trust200902">
  <?rfc toc="yes" ?>

  <?rfc tocdepth="3" ?>

  <?rfc symrefs="yes" ?>

  <?rfc sortrefs="yes"?>

  <?rfc strict="no" ?>

  <?rfc iprnotified="no" ?>

  <?rfc private="Draft" ?>

  <front>
    <title>OpenID Connect Messages 1.0 - draft 07</title>

    <author fullname="Nat Sakimura" initials="N." role="editor"
            surname="Sakimura">
      <organization abbrev="NRI">Nomura Research Institute,
      Ltd.</organization>

      <address>
        <email>n-sakimura@nri.co.jp</email>
      </address>
    </author>

    <author fullname="David Recordon" initials="D." surname="Recordon">
      <organization abbrev="Facebook">Facebook</organization>

      <address>
        <email>dr@fb.com</email>
      </address>
    </author>

    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization abbrev="Protiviti">Protiviti Government
      Services</organization>

      <address>
        <email>jbradley@mac.com</email>
      </address>
    </author>

    <author fullname="Breno de Medeiros" initials="B." surname="de Medeiros">
      <organization abbrev="Google">Google Inc.</organization>

      <address>
        <email>breno@google.com</email>
      </address>
    </author>

    <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
      <organization abbrev="Microsoft">Microsoft Corporation</organization>

      <address>
        <email>mbj@microsoft.com</email>
      </address>
    </author>

    <author fullname="Edmund Jay" initials="E." surname="Jay">
      <organization abbrev="MGI1">MGI1</organization>

      <address>
        <email>ejay@mgi1.com</email>
      </address>
    </author>

    <date day="1" month="November" year="2011" />

    <abstract>
      <t>OpenID Connect is an identity framework that provides authentication,
      authorization, and attribute transmission capability. It allows third
      party attested claims from distributed sources.
      The specification suite builds on OAuth 2.0 and consists of
      Building Blocks (Messages, Discovery, Dynamic Client
      Registration, Session Management, JSON Web Token, JSON Web
      Signature, JSON WEB Encryption, JSON Web Keys, Simple Web
      Discovery), Protocol Bindings (e.g., Standard and Basic Client)
      and Extensions.
      This specification covers the core "Messages" of the suite
      that defines the messages used and abstract flow which will be further
      constrained or extended in the companion specifications in the
      suite.</t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>

      <t>Throughout this document, values are quoted to indicate that they are
      to be taken literally. When using these values in protocol messages, the
      quotes MUST NOT be used as part of the value.</t>
    </note>
  </front>

  <middle>
    <section anchor="terminology" title="Terminology">
      <t>In addition to the terms "Access Token", "Refresh Token",
      "Authorization Code", "Authorization Grant", "Authorization Server",
      "Authorization Endpoint", "Client", "Client Identifier", "Client
      Secret", "Protected Resource", "Resource Owner", "Resource Server", and
      "Token Endpoint" that are defined by <xref target="OAuth.2.0">OAuth
      2.0</xref>, this specification defines the following terms: <list
          style="hanging">
          <t hangText="Assertion">A set of Claims that are attested to 
          by an Issuer.</t>

          <t hangText="Authentication">An act of verifying End-User's identity
          through the verification of the credential.</t>

          <t hangText="Claim">A piece of information about an Entity that a
          Claims Provider asserts about that Entity.</t>

          <t hangText="Claims Provider">An Authorization Server that can
          return claims about an End-User.</t>

          <t hangText="End-User">A human resource owner.</t>

          <t hangText="Entity">Something that has separate and distinct
          existence and that can be identified in context.</t>

          <t hangText="ID Token">A token that contains claims about the
          authentication event.</t>

          <t hangText="Issuer">An Entity who issues an Assertion.</t>

          <t hangText="Issuer Identifier">A verifiable identifier of an Issuer. 
          An issuer Identifier is a HTTPS URL with no path component.</t>

          <t hangText="Message">A request or a response between an OpenID 
          Relying Party and an OpenID Provider.</t>

          <t hangText="OpenID Provider (OP)">A service capable of providing
          identity information to a Relying Party.</t>

          <t hangText="OP Endpoints">End-User Authorization Endpoint, Token
          Endpoint, and UserInfo Endpoint.</t>

          <t hangText="OpenID Request Object">A JSON object that holds the
          request variables. It holds OpenID request variables. It MAY also
          contain other OAuth parameters for the request signing purpose, in
          which case the parameter values MUST match with the OAuth request
          parameters.</t>

          <t hangText="Relying Party (RP)">An application requiring identity
          information from an OpenID Provider.</t>

          <t hangText="Request File">A JSON structure that captures the
          Authorization Request parameters that can be pointed by a URL that
          is reachable by the Authorization Server.</t>

          <t hangText="RP Endpoint">The endpoint to which the OP responses are
          returned through redirect.</t>

          <t hangText="Check ID Endpoint">A resource that, when
          presented with an ID Token by the client, returns authentication
          information about the user session represented by that ID Token.</t>

          <t hangText="UserInfo Endpoint">A protected resource that, when
          presented with an Access Token by the client, returns authorized
          information about the End-User represented by that Access Token.</t>
        </list></t>
    </section>

    <section title="Overview">
      <t>The OpenID Connect protocol, in abstract, follows the following
      steps.</t>

      <t><list style="numbers">
          <t>The Client sends a request to the Authorization Server's End-User
          Authorization Endpoint.</t>

          <t>The Authorization Server authenticates the End-User and obtains 
          appropriate authorization.</t>

          <t>The Authorization Server responds with access_token, id_token, 
          and a few other variables.</t>

          <t>The Client sends a request with the access_token to the <xref
          target="userinfo_ep">UserInfo Endpoint</xref>.</t>

          <t>UserInfo Endpoint returns the additional End-User information
          supported by the Resource Server.</t>

          <t>OPTIONAL. The Client sends a request with the id_token to the
          Authorization Server's <xref target="check_id_ep">Check ID
          Endpoint</xref>.</t>

          <t>OPTIONAL. The Check ID Endpoint responds with authentication
          information pertaining to the supplied id_token.</t>
        </list>
      This specification
      only defines the abstract message flow and message formats. The actual
      use MUST be based on one of the companion protocol bindings
      specifications such as <xref target="OpenID.Basic">OpenID Connect
      Basic Client</xref> or <xref target="OpenID.Standard">OpenID Connect
      Standard</xref>.
    </t>
    </section>

    <section title="Messages">
      <t>In OpenID Connect protocols, in abstract, the process proceeds by the
      client interacting with endpoints. There are a number of endpoints
      involved.</t>

      <t><list style="numbers">
          <t>Authorization Endpoint: The Client sends a request to the 
          Authorization Server at the Authorization Endpoint. The Authorization
          Server then authenticates the End-User to find out if he is eligible
          to make the authorization. Then, upon the authorization action of the
          End-User, the Authorization Server returns an Authorization Response
          that includes Authorization Code, <spanx style="verb">code</spanx>.
          For some Clients, Implicit Grant may be used to obtain <spanx 
          style="verb">access_token</spanx> without using <spanx 
          style="verb">code</spanx>. In this case, <spanx
          style="verb">response_type</spanx> MUST be set to <spanx
          style="verb">token</spanx>.</t>

          <t>Token Endpoint: The Client sends the Access Token Request to the
          Token Endpoint to obtain a Access Token Response which includes an
          <spanx style="verb">access_token</spanx>.</t>

          <t>UserInfo Endpoint: The <spanx style="verb">access_token</spanx>
          MAY be sent to the UserInfo Endpoint to obtain claims about the
          End-User.</t>

          <t>Check ID Endpoint: An id_token MAY be sent to the Check ID
          Endpoint to obtain information about the authentication
          event.</t>

          <t>Session Management Endpoints: The ID Token MAY be sent to these
          endpoints to manage the session.</t>
        </list></t>

      <section title="Authorization Endpoint">
        <t>The client sends an Authorization Request to the Authorization
        Endpoint to obtain an Authorization Response and an <xref
        target="id_token">ID Token</xref>.</t>

        <section anchor="id_token" title="ID Token">
          <t>The ID Token is a token that contains claims pertinent to the
          authentication event. The Token is a <xref target="JWT">JWT</xref>
          which contains JSON claims. </t>

          <t>The ID Token is used to manage the authentication event and user
          identifier and is scoped to a particular client via the <spanx
          style="verb">aud</spanx> (audience) and <spanx style="verb">nonce</spanx>
          claims. It MUST NOT be used as an access token to access OAuth 2.0
          protected resources.</t>

          <t>The ID Token MUST attests minimally to the following claims:</t>

          <t><list style="hanging">
              <t hangText="iss">REQUIRED. The unique identifier of the issuer
              of the response.</t>

              <t hangText="user_id">REQUIRED. A locally unique and never
              reassigned identifier for the End-User, which is intended to be
              consumed by the Client. e.g. <spanx style="verb">24400320</spanx>
              or <spanx style="verb">AItOawmwtWwcT0k51BayewNvutrJUqsvl6qs7A4</spanx>.
              It MUST NOT exceed 255 ASCII characters in length.</t>

              <t hangText="aud">REQUIRED. This member identifies the audience
              that this ID Token is intended for. It MUST be the OAuth <spanx style="verb">client_id</spanx>
              of the RP unless the <spanx style="verb">audience</spanx> 
              parameter is defined in the Authorization Request.</t>

              <t hangText="exp">REQUIRED. Type Integer. Identifies the
              expiration time on or after which the ID Token MUST NOT be
              accepted for processing. The processing of this parameter
              requires that the current date/time MUST be before the
              expiration date/time listed in the value. Implementers MAY
              provide for some small leeway, usually no more than a few
              minutes, to account for clock skew. The value is number of
              seconds from 1970-01-01T0:0:0Z as measured in UTC until the
              desired date/time. See <xref target="RFC3339">RFC 3339</xref>
              for details regarding date/times in general and UTC in
              particular.</t>

              <t hangText="iso29115">OPTIONAL. (entity authentication
              assurance): Specifies the X.eaa / <xref
              target="ISO29115">ISO/IEC29115</xref> entity authentication
              assurance level of the authentication performed.</t>

              <t hangText="nonce">OPTIONAL. If the Authorization Request
              includes a nonce request value, then this value is REQUIRED and
              its value is set to the same value as the request value.</t>

            </list></t>

          <t>JWT ID Tokens MAY be signed or signed and encrypted via <xref
          target="JWS">JWS</xref> and <xref target="JWE">JWE</xref>
          respectively, thereby providing authentication, integrity,
          non-repudiation and/or confidentiality.</t>

          <t>Clients SHOULD verify and decipher signed or encrypted ID Tokens
          independently. Clients that do not understand the ID Token format or
          do not wish to process ID Tokens MAY treat ID Tokens as opaque
          values and submit them to the <xref target="check_id_ep">Check
          ID Endpoint</xref> for verification and decoding.</t>
        </section>

        <section anchor="auth_req" title="Authorization Request">
          <t>Section 4.1.1 and 4.2.1 of <xref target="OAuth.2.0">OAuth
          2.0</xref> defines the OAuth Authorization Request parameters. In
          this specification, the values to the parameters are defined as
          follows.</t>

          <t><list style="hanging">
              <t hangText="response_type">A space delimited, case sensitive
              list of string values. Acceptable values include <spanx
              style="verb">code</spanx>, <spanx style="verb">token</spanx>, and
              <spanx style="verb">id_token</spanx>.
              The value MUST include <spanx style="verb">code</spanx> for
              requesting an Authorization Code, <spanx style="verb">token</spanx>
              for requesting an Access Token, and <spanx 
              style="verb">id_token</spanx> for requesting an ID Token.</t>

              <t hangText="scope">A space delimited, case sensitive list of
              string values. The values specify an additive list of claims
              that are returned by the UserInfo endpoint. The following values
              are defined:<list style="hanging">
                  <t hangText="openid">REQUIRED. Informs the Authorization
                  Server that the client is making an OpenID request. If the
                  <spanx style="verb">openid</spanx> scope is not specified,
                  the server SHOULD treat the request as a generic OAuth 2.0
                  request, and perform no OpenID Connect processing.
                  The <spanx style="verb">openid</spanx> value also requests
                  that the ID Token associated with the authentication session be
                  returned. If the <spanx style="verb">response_type</spanx>
                  includes <spanx style="verb">token</spanx>, the ID Token is
                  returned in the Authorization Response along with the Access
                  Token. If the <spanx style="verb">response_type</spanx>
                  includes <spanx style="verb">code</spanx>, the ID Token is
                  returned as part of the Token Endpoint response.</t>

                  <t hangText="profile">OPTIONAL. This requests that access to
                  the End-User's <xref target="ClaimTable">profile claims</xref>
                  excluding the <spanx style="verb">address</spanx> and <spanx
                  style="verb">email</spanx> claims at the UserInfo Endpoint
                  be granted by the issued Access Token.</t>

                  <t hangText="address">OPTIONAL. This requests that access to
                  <spanx style="verb">address</spanx> claim at the
                  UserInfo Endpoint be granted by the issued Access Token.</t>

                  <t hangText="email">OPTIONAL. This requests that access to
                  the <spanx style="verb">email</spanx> and 
                  <spanx style="verb">verified</spanx> claims at the UserInfo
                  Endpoint be granted by the issued Access Token.</t>
                </list></t>
            </list></t>

          <t>Other required OAuth 2.0 parameters in the request include:</t>

          <t><list style="hanging">
              <t hangText="client_id">The client identifier.</t>

              <t hangText="redirect_uri">A redirection URI where the response
              will be sent.</t>
            </list></t>

          <t>The following extension parameters are also defined:</t>

          <t><list style="hanging">
              <t hangText="nonce">REQUIRED. A random, unique string value used
              to mitigate replay attacks.</t>

            <t hangText="display">OPTIONAL. A string value that specifies
              how the Authorization Server displays the authentication page to
              the End-User.<list style="hanging">
                  <t hangText="none">The Authorization Server
                  MUST NOT display any authentication or confirmation
                  user interface pages. An error is returned if either the End-User 
                  is not already authenticated or the client does not have 
                  pre-configured approval for the requested
                  <spanx style="verb">scopes</spanx>. This can be used as a
                  method to check for existing authentication and/or approval.</t>
                </list></t>

              <t hangText="prompt">OPTIONAL. A space delimited, case sensitive
              list of string values that specifies how the Authorization
              Server prompts the End-User for reauthentication and reapproval. The
              possible values are:<list style="hanging">
                  <t hangText="login">The Authorization Server MUST prompt the
                  End-User for reauthentication.</t>

                  <t hangText="consent">The Authorization Server MUST prompt
                  the End-User for reapproval before returning information to the
                  client.</t>

                  <t hangText="select_account">The Authorization Server MUST
                  prompt the End-User to select a user account if the account has
                  multiple accounts associated with it</t>
                </list>
                This can be used by the client to make sure that the End-User is
                still present for the current session or to bring attention to the
                request. If this parameter is used in conjunction with the 
                <spanx style="verb">display</spanx> parameter set to "none", an
                error is returned.</t>

              <t hangText="audience">OPTIONAL. The target audience identifier
              for the ID Token.</t>

              <t hangText="request">OPTIONAL. A <xref target="JWT">JWT</xref>
              encoded <xref target="OpenIDReq">OpenID Request
              Object</xref>.</t>

              <t hangText="request_uri">OPTIONAL. An URL that points to an
              OpenID Request Object. This is used to pass an OpenID Request
              Object by reference.</t>
            </list></t>

          <t>The request MAY contain the following optional parameters:</t>

          <t><list style="hanging">
              <t hangText="state">An opaque value used to maintain state
              between the request and the callback.</t>
            </list></t>

          <section anchor="OpenIDReq" title="OpenID Request Object">
            <t>The OpenID Request object is used to provide OpenID request
            parameters that MAY differ from the default ones. Implementing
            support for the OpenID Request object is OPTIONAL. Supporting it
            is necessary for implementations that need to request or provide
            sets of claims other than the default <xref
            target="userinfo_ep">UserInfo</xref>, ID Token, and <xref
            target="check_id_ep">Check ID</xref> claim sets.</t>

            <t>The OpenID Request object is a <xref target="JWT">JWT</xref>
            that is passed as the value of the "<spanx style="verb">request</spanx>"
            parameter in the Authorization Request. The OpenID Request Object
            can also be sent by reference. Parameters that affect the
            information returned from the UserInfo Endpoint are in the "<spanx
            style="verb">userinfo</spanx>" member. Parameters that affect the
            information returned in the ID Token
            are in the "<spanx style="verb">id_token</spanx>" member. If the
            same parameters are available both as query strings and in the
            OpenID Request Object, the later takes the precedence.
            </t>

            <t>The OpenID Request Object MUST contain all REQUIRED OAuth 2.0
            Authorization Request parameters and MAY contain optional and
            extension parameters.</t>

            <t>The OpenID Request object MAY contain a set of members defined
            by this specification and MAY contain other members that are not
            defined by this specification. OpenID Request Object members
            SHOULD be understood by both parties.</t>

            <t>The JWT MAY be signed or unsigned. When it is unsigned, it will
            be indicated by the JWT <spanx style="verb">"signed":"none"</spanx>
            convention in the JWT header. If signed, the OpenID Request Object
            SHOULD contain the standard JWT "<spanx style="verb">iss</spanx>"
            and "<spanx style="verb">aud</spanx>" claims.</t>

            <t>The members defined by this specification are:</t>

            <t><list style="hanging">
                <t hangText="userinfo">OPTIONAL. (UserInfo request): Requests
                affecting the values to be returned from the UserInfo
                endpoint. If not present, the UserInfo Endpoint behaves in the
                default manner.</t>

                <t hangText="id_token">OPTIONAL. (ID request): Requests
                affecting the values to be to be returned in the ID Token. 
                If not present, the default ID Token contents are used. 
                If present, these parameters are used
                to request additional claims incremental to the <xref target="id_token">
                                default claims of the ID Token.</xref></t>
              </list><figure>
                <preamble>An example an OpenID request Object before JWT 
                encoding is as follows:</preamble>

                <artwork><![CDATA[{
 "response_type": "code id_token",
 "client_id": "s6BhdRkqt3",
 "redirect_uri": "https://client.example.com/cb",
 "scope": "openid profile",
 "state": "af0ifjsldkj",
 "userinfo":
   {
     "claims":
       {
         "name": null,
         "nickname": {"optional": true},
         "email": null,
         "verified": null,
         "picture": {"optional": true}
       }
   },
 "id_token":
   {
     "claims":
       {
        "auth_time": null
       },
     "max_age": 86400,
     "iso29115": "2"
   }
}]]></artwork>
              </figure></t>

            <section title="&quot;userinfo&quot; member">
              <t>The structure of the "userinfo" (UserInfo Request) member is
              a JSON object that MAY contain the following members:</t>

              <t><list style="hanging">
                  <t hangText="claims">OPTIONAL. (Requested Claims): A JSON object 
                  containing a Set of
                  requested claims from the UserInfo Endpoint. If not present,
                  the default UserInfo claims held by the OP are
                  returned.</t>

                  <t hangText="locale">OPTIONAL. (Locale): The default
                  languages and scripts of the entire claim request,
                  represented as a space-separated list of <xref
                  target="RFC5646">BCP47</xref> language tags.</t>
                </list>
                </t>
                 <t>All members of the "userinfo" object are OPTIONAL.
              Other members MAY be present and if so, SHOULD understood by
              both parties.</t>
                
                <section title="&quot;claims&quot; member">
                <t>The "claims" member is a JSON object with a member for
              each requested claim. The member names are the requested claim
              names. The member values may be either:</t>

              <t><list style="hanging">
                  <t hangText="null">This indicates that this claim is being
                  requested in the default manner. In particular, this is a
                  required claim. OR</t>

                  <t hangText="A JSON Object">This is used to provide
                  additional information about the claim being requested.</t>
                </list>The claims MAY be represented in multiple languages and
              scripts. To specify languages and scripts for the claim request,
              <xref target="RFC5646">BCP47</xref> language tags delimited by a
              "#" MUST be added to each requested claim name for which a
              particular language and script is requested. For example, the
              claim <spanx style="verb">family_name#ja-Kana-JP</spanx> is used
              for expressing Family Name in Katakana in Japanese, which is
              commonly used to index and represent the phonetics of the Kanji
              representation of the same value represented as <spanx
              style="verb">family_name#ja-Hani-JP</spanx>.</t>

              <t>All members of the "claims" object are OPTIONAL.</t>

              <section title="&quot;requested claim&quot; member">
              <t>The members of the JSON object value following a claim name
              defined by this specification are:</t>

              <t><list style="hanging">
                  <t hangText="optional">This is an optional claim paramater, 
                  if present, its value MUST be <spanx style="verb">true</spanx>,
                  which indicates that it is a optional claim. If it is not
                  present, it is a required claim.</t>
                </list>
                Other members MAY be defined to provide additional
              information about the requested claim. If the "claims" member is
              present in the "userinfo" object, the claims requested within it
              override the default claim set that would otherwise be returned
              from the UserInfo Endpoint.</t>

                </section>
              </section>
            </section>

            <section title="&quot;id_token&quot; member">
              <t>The structure and function of the "id_token" (ID Token
              request) member of the OpenID Request Object is similar to that
              of the "userinfo" member. It MAY include "claims", "format",
              "locale". The structure of these members is the same as
              that for the "userinfo" member. If the "claims" member is
              present in the "id_token" object, the claims requested within it
              modify the default claim set that would otherwise be returned in
              the ID Token. Unlike for the "userinfo" member, typically these
              claims will augment, rather than override the default set.</t>

              <t>Following claim MAY be requested in the ID Token by
              specifying it in the "claims" member:</t>

              <t><list style="hanging">
                  <t hangText="auth_time">OPTIONAL. (authenticated at):
                  Requests that the "auth_time" claim be present. The claim
                  value is the number of seconds from 1970-01-01T0:0:0Z as
                  measured in UTC until the date/time that the End-User
                  authentication occurred. (The "auth_time" claim semantically
                  corresponds to the openid.pape.auth_time response
                  parameter.)</t>
                </list>In addition to the "claims" member, this additional
              member is defined within the "id_token" member of the OpenID
              Request object:</t>

              <t><list style="hanging">
                  <t hangText="max_age">OPTIONAL. (max authentication age):
                  Specifies that the End-User must be actively authenticated if
                  any present authentication is older than the specified
                  number of seconds. (The "max_age" request parameter
                  corresponds to the OpenID 2.0 openid.pape.max_auth_age
                  request parameter.)</t>

                  <t hangText="iso29115">OPTIONAL. (entity authentication
                  assurance): Specifies the X.eaa / <xref
                  target="ISO29115">ISO/IEC29115</xref> entity authentication
                  assurance level that is requested by the client.</t>
                </list>It is anticipated that additional "id_token" parameters
              MAY be defined to request that additional properties hold for
              the authentication - for instance, that certain authentication
              policies be applied (in the same spirit of the OpenID 2.0
              openid.pape.auth_policies values), or that the authentication
              conform to the policies defined by a specified trust framework.
              These parameters MAY be defined by extension specifications.</t>

              <t>All members of the "id_token" object are OPTIONAL. Other
              members MAY be present and if so, SHOULD understood by both
              parties</t>
            </section>
          </section>
        </section>

        <section title="Authorization Response">
          <t>When the <spanx style="verb">response_type</spanx> in the request
          is <spanx style="verb">token</spanx>, the Authorization
          Response MUST return the parameters defined in section 4.2.2 of
          <xref target="OAuth.2.0">OAuth 2.0</xref>. This specification only
          supports <xref target="OAuth.2.0.Bearer">Bearer Tokens</xref>. The
          OAuth 2.0 response parameter "<spanx style="verb">token_type</spanx>"
          MUST be set to "<spanx style="verb">Bearer</spanx>".</t>

          <t>When the <spanx style="verb">response_type</spanx> in the request
          is <spanx style="verb">code</spanx>, the Authorization
          Response MUST return the parameters defined in section 4.1.2 of
          <xref target="OAuth.2.0">OAuth 2.0</xref>.</t>

          <t>When the <spanx style="verb">response_type</spanx>
          includes other values, they must be returned as defined by
          there registration.  The id_token return type is defined in
          <xref target="RESPONSE.TYPES">OAuth 2.0 Multiple Response Type
          Encoding Practices</xref>.</t>
        </section>

        <section title="Authorization Error Response">
          <t>If the End-User denies the access request or if the request
          fails, the Authorization Server informs the client by returning
          parameters defined in section 4.1.2.1 of <xref
          target="OAuth.2.0">OAuth 2.0</xref>.</t>

          <section title="Error Codes">
            <t>In addition to the error codes defined in section 4.1.2.1 and 4.2.2.1 of
            <xref target="OAuth.2.0">OAuth 2.0</xref>, this specification
            defines the following additional error codes:</t>

            <t><list style="hanging">
                <t hangText="invalid_request_redirect_uri">The 
                <spanx style="verb">redirect_uri</spanx> in
                the Authorization Request does not match any of the client's 
                pre-registered redirect_uris.</t>

                <t hangText="login_required">The Authorization Server requires
                End-User authentication. This error MAY be returned when the 
                <spanx style="verb">display</spanx> parameter in the
                Authorization Request is set to 'none' to request that the
                Authorization Server should not display any user interfaces to
                the End-User, but the Authorization Request cannot be completed
                without displaying a user interface for user authentication.
              </t>

                <t hangText="session_selection_required">The End-User is required
                to select a session at the Authorization Server. The End-User may
                be authenticated at the Authorization Server with different
                associated accounts, but the End-User did not select a session.
                This error MAY be returned 
                when the <spanx style="verb">display</spanx> parameter in the
                Authorization Request is set to 'none' to request that the
                Authorization Server should not display any user interfaces to
                the End-User, but the Authorization Request cannot be completed
                without displaying a user interface to prompt for a session to
                use.</t>

                <t hangText="approval_required">The Authorization Server
                requires End-User approval. This error MAY be returned when the 
                <spanx style="verb">display</spanx> parameter in the
                Authorization Request is set to 'none' to request that the
                Authorization Server should not display any user interfaces to
                the End-User, but the Authorization Request cannot be completed
                without displaying a user interface for End-User approval.</t>

                <t hangText="user_mismatched">The current logged in End-User at
                the Authorization Server does not match the requested
                user. This error MAY be returned when the 
                <spanx style="verb">display</spanx> parameter in the
                Authorization Request is set to 'none' to request that the
                Authorization Server should not display any user interfaces to
                the End-User, but the Authorization Request cannot be completed
                without displaying a user interface to prompt for the correct
                End-User authentication.</t>
                
                <t hangText="invalid_request_uri">The 
                <spanx style="verb">request_uri</spanx> in
                the Authorization Request returns an error or invalid data.</t>
                
                <t hangText="invalid_openid_request_object">The 
                <spanx style="verb">request</spanx> paramater contains an invalid 
                openid_request_object.</t>
                
                
              </list></t>
            <t>Errors are returned as defined by the registered OAuth
            2.0 <spanx style="verb">response_type</spanx>.</t>
          </section>
        </section>
      </section>

      <section anchor="token_ep" title="Token Endpoint">
        <t>Access Token Request / Response interacts with a Token Endpoint.
        Upon a successful request, it returns an Access Token and ID
        Token.</t>
        
        <section anchor="client_authentication" title="Client Authentication">

          <t>Durring Client Registration the client may register a authentication method.
          If no method is registered the default method of client_secret_basic MUST be used.</t>
          <t>The Supported options are:</t>
          
          <t><list style="hanging">
        
          <t hangText="client_secret_basic"> 
          Clients in possession of a client password authenticate with the Authorization Server
          in accordance with section 3.2.1 of <xref
          target="OAuth.2.0">OAuth 2.0</xref> using HTTP Basic authentication scheme. </t>
          
          <t hangText="client_secret_post">
          Clients in possession of a client password authenticate with the Authorization Server
          in accordance with section 3.2.1 of <xref
          target="OAuth.2.0">OAuth 2.0</xref> by including the client credentials in the request body. </t>
          
          <t hangText="client_secret_jwt"> 
          Clients in possession of a client password sign a JWT using the h256 algorithm.
          The JWT must contain the claims:</t>
         
          <t><list style="hanging">
          <t hangText="client_id">REQUIRED. The client identifier of the
            client.</t>
           <t hangText="aud">REQUIRED. The issuer identifier of the token_endpoint.</t>
           <t hangText="nonce">REQUIRED.  A random, unique string value used
              to mitigate replay attacks. </t>
            <t hangText="iat">REQUIRED.  The iat (issued at) claim identifies the time at which the JWT was issued. </t>
            </list></t>
             
             <t>
	  The authentication token MUST be sent in the <spanx
	  style='verb'>Authorization</spanx> request header field
	  defined by <xref target='I-D.ietf-httpbis-p7-auth' />, the
	  client uses the <spanx style='verb'>Bearer</spanx>
	  authentication scheme to transmit the access token.
        </t>

            
          
          
          <t hangText="private_key_jwt">
           Clients who have registered a public key sign a JWT using the RS256 algorithm if a RSA key was registerd or the ES256 algorithm if a EC key was registered.
          The JWT must contain the claims:</t>
          <t><list style="hanging">
          <t hangText="client_id">REQUIRED. The client identifier of the
            client.</t>
           <t hangText="aud">REQUIRED. The issuer identifier of the token_endpoint.</t>
           <t hangText="nonce">REQUIRED.  A random, unique string value used
              to mitigate replay attacks. </t>
            <t hangText="iat">REQUIRED.  The iat (issued at) claim identifies the time at which the JWT was issued. </t>
            </list></t>
                         <t>
	  The authentication token MUST be sent in the <spanx
	  style='verb'>Authorization</spanx> request header field
	  defined by <xref target='I-D.ietf-httpbis-p7-auth' />, the
	  client uses the <spanx style='verb'>Bearer</spanx>
	  authentication scheme to transmit the access token.
        </t>
        <figure>
          <preamble>
            For example:
          </preamble>
          <artwork>
<![CDATA[POST /resource HTTP/1.1
Host: server.example.com
Authorization: Bearer vF9dft4qmT]]>
          </artwork>
        </figure>
  
          
          
          </list></t>
          
          
       
        
        
        </section>

        <section anchor="access_token_request" title="Access Token Request">
          <t>The client obtains an Access Token by authenticating with the
          Authorization Server and presenting its access grant (in the form of
          an Authorization Code, or Refresh Token).</t>



          <t>In addition to the client authentication parameters,
          if this is a Refresh Token Request, the client MUST send the additional parameters 
          specified in Section 6 of <xref target="OAuth.2.0">OAuth
          2.0</xref>.
          Otherwise the client
          MUST send the request parameter for the Access Token Endpoint as
          specified in section 4.1.3 of <xref target="OAuth.2.0">OAuth
          2.0</xref>.</t>

          <t></t>
        </section>

        <section anchor="access_token_response" title="Access Token Response">
          <t>After receiving and verifying a valid and authorized Access Token
          Request from the client, the Authorization Server returns a Positive
          Assertion that includes an Access Token and an ID Token. The
          parameters in the successful response are defined in Section 4.1.4
          of <xref target="OAuth.2.0">OAuth 2.0</xref>.</t>

          <t>This specification further constrains that only <xref
          target="OAuth.2.0.Bearer">Bearer Tokens</xref> are issued at the
          Token endpoint. The OAuth 2.0 response parameter "<spanx
          style="verb">token_type</spanx>" MUST be set to "<spanx
          style="verb">Bearer</spanx>".</t>

          <t>In addition to the OAuth 2.0 response parameters, the following
          parameters MUST be included in the response if the Authorization
          Request <spanx style="verb">scope</spanx> parameter contains
          <spanx style="verb">openid</spanx>:</t>

          <t><list style="hanging">
            <t hangText="id_token">The ID Token value associated with the
            authentication session.</t>
          </list></t>

          <t></t>

          <figure>
            <preamble>Following is a non-normative example:</preamble>

            <artwork><![CDATA[{
 "access_token": "SlAV32hkKG",
 "token_type": "Bearer",
 "refresh_token": "8xLOxBtZp8",
 "expires_in": 3600,
 "id_token": "eyJ0 ... NiJ9.eyJ1c ... I6IjIifX0.DeWt4Qu ... ZXso"
}]]></artwork>
          </figure>

          <t>As in the <xref target="OAuth.2.0">OAuth 2.0</xref>, Clients
          SHOULD ignore unrecognized response parameters.</t>
        </section>

        <section title="Token Error Response">
          <t>If the token request is invalid or unauthorized, the
          Authorization Server constructs the error response. The parameters
          of the Token Error Response are defined as in Section 5.2 of <xref
          target="OAuth.2.0">OAuth 2.0</xref>.</t>

          <section title="Error Codes">
            <t>In addition to the error codes defined in Section 5.2 of <xref
            target="OAuth.2.0">OAuth 2.0</xref>, this specification defines
            the following error codes.</t>

            <t><list style="hanging">
              <t hangText="invalid_authorization_code">The Authorization
              Code is missing, malformed, or invalid.</t>
            </list></t>
          </section>
        </section>
      </section>

      <section anchor="userinfo_ep" title="UserInfo Endpoint">
        <t>The UserInfo endpoint is an OAuth 2.0 protected resource that
        returns a claim object which contains claims about the authenticated
        End-User. Claim objects are objects that contain members and members'
        values which are the individual claims and claims values. A claim
        object is represented by a JSON object which contains a collection of
        name and value pairs for the claims.</t>

        <section title="Requests">
          <t>Clients MAY send requests with the following parameters to the
          UserInfo Endpoint to obtain further information about the End-User.</t>

          <t><list style="hanging">
            <t hangText="access_token">REQUIRED. The access_token obtained
            from an OpenID Connect Authorization Request. This parameter
            MUST NOT be sent if the Access Token is sent in the HTTP
            Authorization header as described in Section 7.1 of <xref
            target="OAuth.2.0">OAuth 2.0</xref>. Access Tokens sent in the
            authorization header must be <xref
            target="OAuth.2.0.Bearer">Bearer tokens</xref>.</t>

            <t hangText="schema">REQUIRED. The schema in which the data is
            be returned. The default value is <spanx 
            style="verb">openid</spanx>. If the value of this parameter is
            omitted, or not <spanx style="verb">openid</spanx>, the response
            may be a proprietary schema to support backwards compatibility.
            Custom schema names and responses are out of scope
            for this specification.</t>

            <t hangText="id">This identifier is reserved for backwards
            compatibility. It MUST be ignored by the endpoint if the <spanx
            style="verb">openid</spanx> schema is used.</t>
          </list></t>
        </section>

        <section title="Responses">
          <t>If the requested schema is "openid", the response MUST return a
          JSON object that contains the full set or subset of claims that are
          defined below. Additional claims (not specified below) MAY also be
          returned.</t>

          <t>The members may be represented in multiple languages and scripts.
          To specify the languages and scripts, <xref
          target="RFC5646">BCP47</xref> language tags MUST be added to each
          member names delimited by a <spanx style="verb">#</spanx>, e.g.,
          <spanx style="verb">familyName#ja-Kana-JP</spanx> for expressing
          Family Name in Katakana in Japanese, which is commonly used to index
          and represent the phonetics of the Kanji representation of the same
          represented as <spanx style="verb">familyName#ja-Hani-JP</spanx>.</t>

          <texttable anchor="ClaimTable" title="Reserved Member Definitions">
            <ttcol align="left">Member</ttcol>

            <ttcol align="left">Type</ttcol>

            <ttcol align="left">Description</ttcol>

            <c>user_id</c>

            <c>string</c>

            <c>Identifier for the End-User at the issuer.</c>

            <c>name</c>

            <c>string</c>

            <c>End-User's full name in displayable form including all name parts,
            ordered according to End-User's locale and preferences.</c>

            <c>given_name</c>

            <c>string</c>

            <c>Given name or first name of the End-User.</c>

            <c>family_name</c>

            <c>string</c>

            <c>Surname or last name of the End-User.</c>

            <c>middle_name</c>

            <c>string</c>

            <c>Middle name of the End-User.</c>

            <c>nickname</c>

            <c>string</c>

            <c>Casual name of the End-User that may or may not be the same as the
            <spanx style="verb">given_name</spanx>. For instance, a <spanx
            style="verb">nickname</spanx> value of <spanx style="verb">Mike</spanx>
            might be returned alongside a <spanx style="verb">given_name</spanx>
            value of <spanx style="verb">Michael</spanx>.</c>

            <c>profile</c>

            <c>string</c>

            <c>URL of End-User's profile page.</c>

            <c>picture</c>

            <c>string</c>

            <c>URL of the End-User's profile picture.</c>

            <c>website</c>

            <c>string</c>

            <c>URL of End-User's web page or blog.</c>

            <c>email</c>

            <c>string</c>

            <c>The End-User's preferred e-mail address.</c>

            <c>verified</c>

            <c>boolean</c>

            <c>True if the End-User's e-mail address has been verified; otherwise
            false.</c>

            <c>gender</c>

            <c>string</c>

            <c>The End-User's gender: <spanx style="verb">female</spanx> or <spanx
            style="verb">male</spanx>.</c>

            <c>birthday</c>

            <c>string</c>

            <c>The End-User's birthday, represented as a date string in MM/DD/YYYY
            format. The year MAY be <spanx style="verb">0000</spanx>,
            indicating that it is omitted.</c>

            <c>zoneinfo</c>

            <c>string</c>

            <c>String from zoneinfo <xref target="zoneinfo"></xref> timezone
            database. For example, <spanx style="verb">Europe/Paris</spanx> or
            <spanx style="verb">America/Los_Angeles</spanx>.</c>

            <c>locale</c>

            <c>string</c>

            <c>The End-User's locale, represented as an <xref target="RFC5646">RFC
            5646</xref> language tag. This is typically an <xref
            target="ISO639-1">ISO 639-1 Alpha-2</xref> language code in
            lowercase and an <xref target="ISO3166-1">ISO 3166-1
            Alpha-2</xref> country code in uppercase, separated by a dash. For
            example, <spanx style="verb">en-US</spanx> or <spanx style="verb">fr-CA</spanx>.
            As a compatibility note, some implementations have used an
            underscore as the separator rather than a dash, for example,
            <spanx style="verb">en_US</spanx>; Implementations MAY choose to
            accept this locale syntax as well.</c>

            <c>phone_number</c>

            <c>string</c>

            <c>The End-User's preferred telephone number. For example, <spanx
            style="verb">+1 (425)
            555-1212</spanx> or <spanx style="verb">+56 (2) 687 2400</spanx>.</c>

            <c>address</c>

            <c>JSON object</c>

            <c>The End-User's preferred address. The value of the <spanx
            style="verb">address</spanx> member is a <xref
            target="RFC4627">JSON</xref> structure containing some or all of
            these string-valued fields: <spanx style="verb">formatted</spanx>,
            <spanx style="verb">street_address</spanx>, <spanx style="verb">locality</spanx>,
            <spanx style="verb">region</spanx>, <spanx style="verb">postal_code</spanx>,
            and <spanx style="verb">country</spanx>. The <spanx style="verb">street_address</spanx>
            field MAY contain multiple lines if the address representation
            requires it. Implementations MAY return only a subset of the
            fields of an <spanx style="verb">address</spanx>, depending upon
            the information available and the End-User's privacy preferences. For
            example, the <spanx style="verb">country</spanx> and <spanx
            style="verb">region</spanx> might be returned without returning
            more fine-grained address information.</c>

            <c>updated_time</c>

            <c>string</c>

            <c>Time the End-User's information was last updated, represented as a
            <xref target="RFC3339">RFC 3339</xref> datetime. For example,
            <spanx style="verb">2011-01-03T23:58:42+0000</spanx>.</c>
          </texttable>

          <t>For privacy reasons, OpenID providers may elect to not provide
          values for some schema elements as part of the "openid" scope.</t>

          <t>The UserInfo Endpoint MUST return claims in JSON format unless a
          request for a different format is made by the client in the
          Authorization Request. The UserInfo Endpoint MAY return claims in
          JWT format which can be signed or encrypted via <xref
          target="JWS">JWS</xref> and <xref target="JWE">JWE</xref>
          respectively. <xref target="OpenIDReq">The OpenID Request
          Object</xref> describes how to request a different format. The
          UserInfo endpoint MUST return a content-type header to indicate
          which format is being returned. The following are accepted content
          types:</t>

          <texttable style="all">
            <ttcol>Content-Type</ttcol>

            <ttcol>Format Returned</ttcol>

            <c>application/json</c>

            <c>plain text JSON object</c>

            <c>application/jwt</c>

            <c>A JWT</c>
          </texttable>

          <t></t>

          <t>The following is a non-normative normal claims responses:</t>

          <t><figure>
            <artwork><![CDATA[{
 "name": "Jane Doe"
 "given_name": "Jane",
 "family_name": "Doe",
 "email": "janedoe@example.com",
 "picture": "http://example.com/janedoe/me.jpg"
}]]></artwork>
          </figure></t>
        </section>

        <section title="Errors">
          <t>In addition to the error codes defined in section 2.4.1 of
          <xref target="OAuth.2.0.Bearer">OAuth 2.0 Bearer Tokens</xref>, this specification
          defines the following additional error codes:</t>

          <t><list style="hanging">
            <t hangText="invalid_schema">The requested schema is invalid or
            unsupported.</t>
          </list></t>
        </section>

        <section title="Claim Types">
          <t>The UserInfo Endpoint MAY return a claim object containing the
          following three types of claims:</t>

          <t><list style="hanging">
            <t hangText="Normal Claims">Claims that are directly asserted by
            the OpenID Provider.</t>

            <t hangText="Aggregated Claims">Claims that are asserted by a
            Claims Provider other than the OpenID Provider but are returned
            by OpenID Provider.</t>

            <t hangText="Distributed Claims">Claims that are asserted by a
            Claims Provider other than the OpenID Provider but are returned
            as references by the OpenID Provider.</t>
          </list>The UserInfo endpoint MUST support normal claims.</t>

          <t>Aggregated and distributed claims support is OPTIONAL.</t>

          <section title="Normal Claims">
            <t>Normal claims are represented as members in a claim object. The
            claim name is the member name and the claim value is the member
            value.</t>

            <t>The following is a non-normative normal claims responses:</t>

            <figure>
              <artwork><![CDATA[{
 "name": "Jane Doe"
 "given_name": "Jane",
 "family_name": "Doe",
 "email": "janedoe@example.com",
 "picture": "http://example.com/janedoe/me.jpg"
}]]></artwork>
            </figure>

            <t></t>
          </section>

          <section title="Aggregated and Distributed Claims">
            <t>Aggregated and distributed claims are represented within the
            "_claim_names" and "_claim_sources" members of a claim object.
            Both "_claim_names" and "_claim_sources" members are claim
            objects.</t>

            <t><list style="hanging">
              <t hangText="_claim_names">This is a JSON object whose member
              names are the claims names for the aggregated and distributed
              claims. The member values are references to the member names
              in the "_claim_sources" member of the claim object from which
              the actual value can be retrieved.</t>

              <t hangText="_claim_sources">This is a JSON object whose
              member names are referenced by the member values of the
              "_claim_names" member of the claim object. The member values
              contain sets of aggregated claims or reference locations for
              distributed claims. The member values can have one of the
              following formats depending on whether it's providing
              aggregated or distributed claims: <list style="hanging">
              <t hangText="Aggregated Claims">A JSON object which MUST
              contain the "JWT" member whose value is a <xref
              target="JWT">JWT</xref> which MUST contain all the claims
              in the "_claim_names" object which references the
              corresponding "_claim_sources" member. Other members MAY
              be present if they are understood by both parties.<list
              style="hanging">
              <t hangText="JWT">REQUIRED. JWT Value</t>
              </list></t>

              <t hangText="Distributed Claims">A JSON object which
              contains the following members and values:<list
              style="hanging">
              <t hangText="endpoint">REQUIRED. The value is the
              OAuth 2.0 resource endpoint from which the associated
              claim can be retrieved. The endpoint URL MUST return
              the claim as a JWT.</t>

              <t hangText="access_token">OPTIONAL. Access Token
              enabling retrieval of the claims from the endpoint URL
              by using the <xref target="OAuth.2.0.Bearer">OAuth 2.0
              Bearer</xref> scheme. Claims SHOULD be requested using
              the Authorization Request header field and claims
              sources MUST support this method. If the Access Token
              is not available, clients MAY need to retrieve the
              Access Token out of band or use an a priori Access
              Token that was negotiated between the claim source and
              client, or the claim source MAY reauthenticate the
              End-User and/or reauthorize the client.</t>
              </list></t>
              </list> Other members MAY be present, if understood by both
              parties</t>
            </list></t>

            <t>The following is a non-normative response with aggregated
            claims:</t>

            <t><figure>
              <artwork><![CDATA[
Claims Provider A contains the following claims for Jane Doe:
{
 "address": "1234 Hollywood Blvd., Los Angeles, CA 90210",
 "phone_number": "+1 (310) 123-4567"
}


Claims Provider A signs the JSON claims, resulting in a signed JWT:
jwt_header.jwt_part2.jwt_part3


Authorization Server returns Jane Doe's aggregated claims from Claims Provider A : 
{
 "name": "Jane Doe",
 "given_name": "Jane",
 "family_name": "Doe",
 "birthday": "01/01/2001",
 "eye_color": "blue",
 "email": "janedoe@example.com",
 "_claim_names": {
  "address": "src1",
  "phone_number": "src1"
 },
 "_claim_sources": {
  "src1": {"JWT": "jwt_header.jwt_part2.jwt_part3"}
 }
}

]]></artwork>
            </figure></t>

            <t>The following is a non-normative response with distributed
            claims:</t>

            <t><figure>
              <artwork><![CDATA[
Claims Provider A (Jane Doe's Bank) contains the following claims for Jane Doe:
{
 "shipping_address": "1234 Hollywood Blvd., Los Angeles, CA 90210",
 "payment_info": "Some_Card 1234 5678 90123 4562",
 "phone_number": "+1 (310) 123-4567"
}


A Claims Provider B (Credit Agency) contains the following claims for Jane Doe:
{
 "credit_score": "650"
}


Authorization Server returns Jane Doe's claims along with the distributed claims from
Claims Provider A and B by sending the access tokens and URL locations where the claims
may be retrieved:
{
 "name": "Jane Doe",
 "given_name": "Jane",
 "family_name": "Doe",
 "email": "janedoe@example.com",
 "birthday": "01/01/2001",
 "eye_color": "blue",
 "_claim_names": {
  "payment_info": "src1",
  "shipping_address": "src1",
  "credit_score": "src2"
 },
 "_claim_sources": {
  "src1": {"endpoint": "https://bank.example.com/claimsource"},
  "src2": {"endpoint": "https://creditagency.example.com/claimshere", "access_token": "ksj3n283dke"}
 }
}

]]></artwork>
            </figure></t>
          </section>
        </section>
      </section>

      <section anchor="check_id_ep" title="Check ID Endpoint">
        <t>The Check ID Endpoint validates ID Tokens and returns a <xref
        target="RFC4627">JSON</xref> object which contains information about
        the End-User and authentication event associated with the supplied ID
        Token.</t>

        <t>This endpoint can be used by clients that are not able to or do not
        wish to handle ID Tokens. In such cases, clients MAY treat the ID
        Token as an opaque value, and use the Check ID Endpoint to
        retrieve and examine the claims associated with the ID Token.</t>

        <section title="Check ID Request">
          <t>To request the information about the authentication performed on
          the End-User, the following parameters are sent to the Check ID
          Endpoint:</t>

          <t><list style="hanging">
            <t hangText="id_token">REQUIRED. The ID Token obtained from an
            OpenID Connect Authorization Request.</t>
          </list></t>
        </section>

        <section title="Check ID Response">
          <t>The response is a <xref target="RFC4627">JSON</xref> object
          containing the <xref target="id_token">ID Token</xref> claims.</t>

          <t>Other claims MAY be returned by specifying the desired ID Token 
          claims to be returned in an <xref
          target="OpenIDReq">OpenID Request Object</xref> when making an
          Authorization Request. The Check ID endpoint MUST return
          claims in JSON format unless a request for a different format is
          made by the client in the Authorization Request. The Check ID
          Endpoint MAY return claims in JWT format which can be <xref
          target="JWS">JWS</xref> signed or <xref target="JWE">JWE</xref>
          encrypted. <xref target="OpenIDReq">The OpenID Request Object</xref>
          describes how to request a different format. The Check ID
          Endpoint MUST return a content-type header to indicate which format
          is being returned. The following are accepted content types:</t>

          <texttable style="all">
            <ttcol>Content-Type</ttcol>

            <ttcol>Format Returned</ttcol>

            <c>application/json</c>

            <c>plain text JSON object</c>

            <c>application/jwt</c>

            <c>A JWT</c>
          </texttable>

          <figure>
            <preamble>The following is a non-normative example of a request to
            the Check ID endpoint:</preamble>

            <artwork><![CDATA[
POST /id_token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-encoded

id_token=eyJ0eXAiOiJKV1QiL


HTTP/1.1 200 OK
Content-Type: application/json

{
 "iss": "http://server.example.com",
 "user_id": "248289761001",
 "aud": "http://client.example.com",
 "exp": 1311281970
}
]]></artwork>
          </figure>
        </section>

        <section title="Error Codes">
          <t>In addition to the error codes defined in Section 5.2 of <xref
          target="OAuth.2.0">OAuth 2.0</xref>, this specification defines the
          following error codes.</t>

          <t><list style="hanging">
            <t hangText="invalid_id_token">The ID Token is not valid for the
            requested resource, is malformed, is in an incorrect format, or
            is expired.</t>
          </list></t>
        </section>
      </section>

      <section title="Session Management Endpoints">
        <t>The Session Management endpoints provide endpoints to manage and
        synchronize authentication sessions at the Authorization Server and
        clients. The endpoints are specified in the <xref
        target="OpenID.Session">OpenID Connect Session Management</xref>
        specification.</t>
      </section>
    </section>

    <section anchor="Serializations" title="Serializations">
      <t>Parameter names and values MAY be JSON serialized into a JSON
      structure.</t>

      <section anchor="js" title="JSON Serialization">
        <t>The parameters are serialized into a JSON structure by adding each
        parameter at the highest structure level. Parameter names and string
        values are included as JSON strings. Numerical values are included as
        JSON numbers. Each parameter may have JSON Structure as its value.</t>

        <figure>
          <preamble>Following is a non-normative example of such
          serialization:</preamble>

          <artwork><![CDATA[{
 "access_token":"SlAV32hkKG",
 "expires_in":3600,
 "refresh_token":"8xLOxBtZp8"
}]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="sigenc" title="Signatures and Encryption">
      <t>Depending on the transport through which the messages are sent, the
      integrity of the message may not be guaranteed and the originator of the
      message may not be authenticated. To mitigate these risks, OpenID
      Connect messages MAY utilize <xref target="JWS">JSON Web Signatures
      (JWS)</xref> to sign the content.</t>

      <t>To achieve message confidentiality, OpenID Connect messages MAY use
      <xref target="JWE">JSON Web Encryption (JWE)</xref> to encrypt the
      content.</t>
    
    <t>When the message is both signed and 
      encrypted, it MUST be signed first then encrypted. </t>

      <section anchor="sigs" title="Signing">
        <t><list style="hanging">
          <t hangText="HMAC-SHA256 Signatures">
            When using HMAC-SHA256 Signatures, <spanx style="verb">
            alg</spanx> claim of the JWS header MUST be set to 
            <spanx style="verb">HS256</spanx>. 
            The <spanx style="verb">client_secret</spanx> MUST 
            be used as the signature key. 
          </t>
          <t hangText="RSA and ECDSA Signatures">
            When using RSA-SHA256 or ECDSA-SHA256 Signatures, 
            <spanx style="verb">alg</spanx> MUST be set to 
            <spanx style="verb">RS256</spanx> and 
            <spanx style="verb">ES256</spanx> respectively. 
            As the key, either <spanx style="verb">x5u</spanx>
            or <spanx style="verb">x5t</spanx> registered/obtained 
            MUST be used to retrieve the relevant key. 
            If there were multiple keys in <spanx style="verb">jku</spanx>, 
            <spanx style="verb">kid</spanx> MUST be specified in JWS header. 
            If there were multiple certificates in <spanx style="verb">
            x5u</spanx>, then <spanx style="verb">x5t</spanx> MUST be 
            specified in JWS header. 
            The key usage of the respective keys MUST include signature. 
          </t>
        </list></t>
      </section>

      <section anchor="enc" title="Encryption">
        <t><list style="hanging">
          <t hangText="Using client_secret">
            [tbd] To use client_secret to encrypt the payload, 
            Keywrap MUST be used. 
          </t>
          <t hangText="Asymmetric Encryption">
            [tbd] . 
            As the key, either <spanx style="verb">x5u</spanx>
            or <spanx style="verb">x5t</spanx> registered/obtained 
            MUST be used to retrieve the relevant key. 
            If there were multiple keys in <spanx style="verb">jku</spanx>, 
            <spanx style="verb">kid</spanx> MUST be specified in JWS header. 
            If there were multiple certificates in <spanx style="verb">
            x5u</spanx>, then <spanx style="verb">x5t</spanx> MUST be 
            specified in JWS header. 
            The key usage of the respective keys MUST include signature. 
          </t>
        </list></t>
      </section>
    </section>

    <section title="Verification">
      <section title="Authorization Request Verification">
        <t>If the request contains a signed <xref
        target="OpenIDReq">OpenID Request Object</xref>, the Authorization 
        Server MUST validate the signature according to Section 5 of <xref
        target="JWS">JWS</xref>.</t>
      </section>

      <section title="Authorization Response Verification">
        <t>To verify the validity of the Authorization Response, the client
        MUST do the following:</t>

        <t><list style="numbers">
            <t>If the Authorization Response contains a signed ID Token, the
            Client SHOULD verify the ID Token signature according to Section 5
            of <xref target="JWS">JWS</xref>.</t>

            <t>Check that the current time is within the validity period contained
            within the response.</t>

            <t>Check that the OP that responded was really the intended OP
            through a TLS/SSL server certificate check.</t>
          </list></t>

        <t>If the client does not directly verify the ID Token signature, it
        MUST make a request to the Check ID Endpoint to validate the ID Token.</t>
      </section>

      <section title="Token Response Verification">
        <t>To verify the validity of the Token response, the client MUST do
        the following:</t>

        <t><list style="numbers">
            <t>If the response contains a signed ID Token, the Client SHOULD validate the
            signature according to Section 5 of <xref
            target="JWS">JWS</xref>.</t>

            <t>Check that current time is within the validity period contained
            within the response.</t>

            <t>Check that the OP that responded was really the intended OP
            through a TLS/SSL server certificate check.</t>
          </list></t>

        <t>If the client does not directly verify the ID Token signature, it
        MUST make a request to the Check ID Endpoint to validate the ID Token.</t>
      </section>

      <section title="UserInfo Response Verification">
        <t>To verify the validity of the UserInfo response, the client MUST do
        the following:</t>

        <t><list style="numbers">
            <t>If the response was signed, the Client SHOULD validate the
            signature according to Section 5 of <xref
            target="JWS">JWS</xref>.</t>

            <t>Check that the OP that responded was really the intended OP
            through a TLS/SSL server certificate check.</t>
          </list></t>
      </section>

      <section title="Check ID Request Verification">
        <t>The Authorization Server MUST check that the id_token parameter is
        present and that if it is signed, it MUST be verify
        the signature according to Section 5 of <xref
        target="JWS">JWS</xref>.</t>
      </section>

      <section title="Check ID Response Verification">
        <t>To verify the validity of the Response, the client MUST do the
        following:</t>

        <t><list style="numbers">
            <t>Check that current time is within the validity period of the
            <spanx style="verb">exp</spanx> contained within the response.</t>

            <t>Verify that the response was intended for the recipient, using
            the <spanx style="verb">aud</spanx> (audience) contained within
            the response.</t>

            <t>Verify that <spanx style="verb">iss</spanx> is a trusted issuer
            of the response.</t>

            <t>If <spanx style="verb">nonce</spanx> is present, verify that
            it is the same value as the one that was sent in the authorization
            request.</t>

            <t>Check that the server that responded was really the intended
            server through a TLS/SSL server certificate check.</t>
          </list></t>
      </section>
    </section>

    <section anchor="related" title="Related Specifications">
      <t>These related OpenID Connect specifications MAY OPTIONALLY be used in
      combination with this specification to provide additional functionality:
      <list style="symbols">
          <t><xref target="OpenID.Discovery">OpenID Connect Discovery
          1.0</xref> - Dynamic discovery for user and Authorization Server 
          endpoints and information</t>

          <t><xref target="OpenID.Registration">OpenID Connect Dynamic Client
          Registration 1.0</xref> - Dynamic registration of OpenID Connect
          clients with OpenID Providers</t>

          <t><xref target="OpenID.Session">OpenID Connect Session Management
          1.0</xref> - Session management for OpenID Connect sessions</t>

          <t><xref target="OpenID.Standard">OpenID Connect Standard 1.0</xref>
          - Protocol binding for the full set of OpenID Connect Messages</t>

          <t><xref target="OpenID.Basic">OpenID Connect Basic Client 1.0</xref> -
          Protocol binding for a subset of the OpenID Connect Messages
          which is intended for use by basic relying parties.</t>
        </list></t>
    </section>

    <section anchor="security_considerations" title="Security Considerations">
      <t>This specification references the security considerations defined in
      <xref target="OAuth.2.0.SC">OAuth 2.0 Security
      Considerations</xref>.</t>

      <t>Followings are the list of attack vectors and remedies that were
      considered for this specification.</t>

      <t>For details of the attack vector, see <xref
      target="SP800-63"></xref>.</t>

      <section anchor="assertion_manufacture"
               title="Assertion Manufacture/Modification">
        <t>To mitigate this attack, there are two ways to mitigate it.</t>

        <t><list style="numbers">
            <t>The assertion may be digitally signed by the OP. The Relying
            Party SHOULD check the digital signature to verify that it was
            issued by a legitimate OP.</t>

            <t>The assertion may be sent over a protected channel such as
            TLS/SSL as defined in <xref target="RFC5246">RFC 5246</xref>. 
            In order to protect the integrity of assertions from
            malicious attack, the OP MUST be authenticated. In this
            specification, the assertion is always sent over TLS/SSL protected
            channel.</t>
          </list></t>
      </section>

      <section anchor="assertion_disclosure" title="Assertion Disclosure">
        <t>The Assertion disclosure can be mitigated in the following two
        ways.</t>

        <t><list style="numbers">
            <t>Assertion is sent over TLS/SSL protected channel, where RP is
            authenticated by "client_id" and "client_secret".</t>

            <t>Signed Assertion is encrypted by the RP's public key.</t>
          </list></t>
      </section>

      <section anchor="assertion_repudiation" title="Assertion Repudiation">
        <t>To mitigate this threat, the assertion may be digitally signed by
        the OP using a key that supports non-repudiation. The RP SHOULD check
        the digital signature to verify that it was issued by a legitimate
        OP.</t>
      </section>

      <section anchor="assertion_redirect" title="Assertion Redirect">
        <t>To mitigate this threat, the assertion includes the identity of the
        RP for whom it was generated as "client_id". The RP verifies that
        incoming assertions include its identity as the recipient of the
        assertion.</t>
      </section>

      <section anchor="assertion_reuse" title="Assertion Reuse">
        <t>The assertion includes a timestamp and a short lifetime of
        validity. The Relying Party checks the timestamp and lifetime values
        to ensure that the assertion is currently valid.</t>
      </section>

      <section anchor="auth_code_manufacture"
               title="Secondary Authenticator Manufacture">
        <t>Due to the large entropy requirement of the secondary authenticator
        (Authorization Code) and short life nature of its validity, the success
        probability of this attack is extremely low.</t>
      </section>

      <section anchor="auth_code_capture"
               title="Secondary Authenticator Capture">
        <t>Secondary authenticator (Authorization Code) is transmitted only through
        HTTPS, thus it is protected between the OP and the User-Agent, and
        User-Agent and the RP.</t>

        <t>The only place where it can be captured is the User-Agent where the TLS
        session is terminated. It is possible if the User-Agent is infested
        by malwares. However, it renders no usefulness as long as the profile
        uses either RP authentication or assertion encryption.</t>
      </section>

      <section anchor="assertion_substitution" title="Assertion Substitution">
        <t>Responses to assertion requests is bound to the corresponding
        requests by message order in HTTP, as both assertions and requests are
        protected by TLS that can detect and disallow malicious reordering of
        packets.</t>
      </section>

      <section anchor="auth_req_disclosure"
               title="Authentication Request Disclosure">
        <t>If the authentication request is POSTed directly through a
        protected channel, it is not possible to disclose the authentication
        request.</t>

        <t>If the Request File is encrypted by the OP's public key, the
        authentication request will not be disclosed unless OP's private key
        gets compromised or the encryption algorithm becomes vulnerable.</t>
      </section>

      <section title="Timing Attack">
        <t>Timing attacks can be used to reduce the effective key length of the
        signature if the time required to return the response in case of a
        signature error and a correct signature differs. Care should be taken
        in the implementation to avoid this attack.</t>
      </section>

      <section anchor="authn_proc_threats"
               title="Authentication Process Threats">
        <t>In the category of Authentication Process Threats, following
        threats exists.</t>

        <t><list style="symbols">
            <t>Online guessing</t>

            <t>Phishing</t>

            <t>Pharming</t>

            <t>Eavesdropping</t>

            <t>Replay</t>

            <t>Session hijack</t>

            <t>Man-in-the-middle</t>
          </list>Authentication process per se as described in NIST
        SP800-63-rev1 is out of scope for this protocol, but care SHOULD be
        taken to achieve appropriate protection.</t>
      </section>
    </section>

    <section anchor="iana" title="IANA Considerations">
      <t>This document makes no request of IANA.</t>

    
    </section>

  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5646"?>

      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.3339"?>
      
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml"?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-httpbis-p7-auth-16.xml'?>

      <reference anchor="OpenID.Basic">
        <front>
          <title>OpenID Connect Basic Client 1.0</title>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute,
            Ltd.</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Protiviti">Protiviti Government
            Services</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft
            Corporation</organization>
          </author>

          <author fullname="Breno de Medeiros" initials="B."
                  surname="de Medeiros">
            <organization abbrev="Google">Google</organization>
          </author>

          <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
            <organization abbrev="Salesforce">Salesforce</organization>
          </author>

          <author fullname="Edmund Jay" initials="E." surname="Jay">
            <organization abbrev="MGI1">MGI1</organization>
          </author>

          <date day="14" month="October" year="2011" />
        </front>

        <format target="http://openid.net/specs/openid-connect-basic-1_0.html"
                type="HTML" />
      </reference>

      <reference anchor="OpenID.Standard">
        <front>
          <title>OpenID Connect Standard
          1.0</title>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute,
            Ltd.</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Protiviti">Protiviti Government
            Services</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft
            Corporation</organization>
          </author>

          <author fullname="Breno de Medeiros" initials="B."
                  surname="de Medeiros">
            <organization abbrev="Google">Google</organization>
          </author>

          <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
            <organization abbrev="Salesforce">Salesforce</organization>
          </author>

          <author fullname="Edmund Jay" initials="E." surname="Jay">
            <organization abbrev="MGI1">MGI1</organization>
          </author>

          <date day="14" month="October" year="2011" />
        </front>

        <format target="http://openid.net/specs/openid-connect-standard-1_0.html"
                type="HTML" />
      </reference>

      <reference anchor="OpenID.Discovery">
        <front>
          <title>OpenID Connect Discovery 1.0</title>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute,
            Ltd.</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Protiviti">Protiviti Government
            Services</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft</organization>
          </author>

          <author fullname="Edmund Jay" initials="E." surname="Jay">
            <organization abbrev="MGI1">MGI1</organization>
          </author>

          <date day="30" month="September" year="2011" />
        </front>

        <format target="http://openid.net/specs/openid-connect-discovery-1_0.html"
                type="HTML" />
      </reference>

      <reference anchor="OpenID.Registration">
        <front>
          <title>OpenID Connect Dynamic Client
          Registration 1.0</title>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute,
            Ltd.</organization>
          </author>

          <author fullname="John Bradley" initials="J." role="editor"
                  surname="Bradley">
            <organization abbrev="Protiviti">Protiviti Government
            Services</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft
            Corporation</organization>
          </author>

          <date day="30" month="September" year="2011" />
        </front>

        <format target="http://openid.net/specs/openid-connect-registration-1_0.html"
                type="HTML" />
      </reference>

      <reference anchor="OpenID.Session">
        <front>
          <title>OpenID Connect Session Management
          1.0</title>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute,
            Ltd.</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Protiviti">Protiviti Government
            Services</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft
            Corporation</organization>
          </author>

          <author fullname="Breno de Medeiros" initials="B."
                  surname="de Medeiros">
            <organization abbrev="Google">Google</organization>
          </author>

          <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
            <organization abbrev="Salesforce">Salesforce</organization>
          </author>

          <author fullname="Edmund Jay" initials="E." surname="Jay">
            <organization abbrev="MGI1">MGI1</organization>
          </author>

          <date day="2" month="September" year="2011" />
        </front>

        <format target="http://openid.net/specs/openid-connect-session-1_0.html"
                type="HTML" />
      </reference>

      <reference anchor="OAuth.2.0">
        <front>
          <title>OAuth 2.0 Authorization Protocol</title>

          <author fullname="Eran Hammer-Lahav" initials="E." role="editor"
                  surname="Hammer-Lahav">
            <organization abbrev="Yahoo">Yahoo</organization>
          </author>

          <author fullname="David Recordon" initials="D." surname="Recordon">
            <organization abbrev="Facebook">Facebook</organization>
          </author>

          <author fullname="Dick Hardt" initials="D." surname="Hardt">
            <organization abbrev="Microsoft">Microsoft</organization>
          </author>

          <date day="22" month="September" year="2011" />
        </front>

        <format target="http://tools.ietf.org/html/draft-ietf-oauth-v2"
                type="HTML" />
      </reference>

      <reference anchor="OAuth.2.0.SC">
        <front>
          <title>OAuth 2.0 Threat Model and Security Considerations</title>

          <author fullname="Torsten Lodderstedt" initials="T." role="editor"
                  surname="Lodderstedt">
            <organization abbrev="DT">Deutsche Telekom AG</organization>
          </author>

          <author fullname="Mark McGloin" initials="M." surname="McGloin">
            <organization abbrev="IBM">IBM</organization>
          </author>

          <author fullname="Phil Hunt" initials="P." surname="Hunt">
            <organization abbrev="Oracle">Oracle Corporation</organization>
          </author>

          <date day="1" month="July" year="2011" />
        </front>

        <format target="http://tools.ietf.org/html/draft-ietf-oauth-v2-threatmodel"
                type="HTML" />
      </reference>

      <reference anchor="OAuth.2.0.Bearer">
        <front>
          <title>OAuth 2.0 Protocol: Bearer Tokens</title>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft
            Corporation</organization>
          </author>

          <author fullname="Dick Hardt" initials="D." surname="Hardt">
            <organization>Independent</organization>
          </author>

          <author fullname="David Recordon" initials="D." surname="Recordon">
            <organization abbrev="Facebook">Facebook</organization>
          </author>

          <date day="22" month="September" year="2011" />
        </front>

        <format target="http://tools.ietf.org/html/draft-ietf-oauth-v2-bearer"
                type="HTML" />
      </reference>

      <reference anchor="JWT">
        <front>
          <title>JSON Web Token</title>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft
            Corporation</organization>
          </author>

          <author fullname="Dirk Balfanz" initials="D." surname="Balfanz">
            <organization abbrev="goog">Google</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="pgs">rotivity Government
            Service</organization>
          </author>

          <author fullname="Yaron Goland" initials="Y." surname="Goland">
            <organization abbrev="msft">Microsoft</organization>
          </author>

          <author fullname="John Panzer" initials="J." surname="Panzer">
            <organization abbrev="goog">Google</organization>
          </author>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="nri">Nomura Research Institute,
            Ltd.</organization>
          </author>

          <author fullname="Paul Tarjan" initials="P." surname="Tarjan">
            <organization abbrev="fb">Facebook</organization>
          </author>

          <date day="11" month="July" year="2011" />
        </front>

        <format target="http://tools.ietf.org/html/draft-jones-json-web-token"
                type="HTML" />
      </reference>

      <reference anchor="JWS">
        <front>
          <title>JSON Web Signatures</title>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft
            Corporation</organization>
          </author>

          <author fullname="Dirk Balfanz" initials="D." surname="Balfanz">
            <organization abbrev="goog">Google</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="pgs">rotivity Government
            Service</organization>
          </author>

          <author fullname="Yaron Goland" initials="Y." surname="Goland">
            <organization abbrev="msft">Microsoft</organization>
          </author>

          <author fullname="John Panzer" initials="J." surname="Panzer">
            <organization abbrev="goog">Google</organization>
          </author>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="nri">Nomura Research Institute,
            Ltd.</organization>
          </author>

          <author fullname="Paul Tarjan" initials="P." surname="Tarjan">
            <organization abbrev="fb">Facebook</organization>
          </author>

          <date day="29" month="April" year="2011" />
        </front>

        <format target="http://tools.ietf.org/html/draft-jones-json-web-signature"
                type="HTML" />
      </reference>

      <reference anchor="JWE">
        <front>
          <title>JSON Web Encryption</title>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft
            Corporation</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="pgs">rotivity Government
            Service</organization>
          </author>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="nri">Nomura Research Institute,
            Ltd.</organization>
          </author>

          <date day="23" month="July" year="2011" />
        </front>

        <format target="http://tools.ietf.org/html/draft-jones-json-web-encryption"
                type="HTML" />
      </reference>

      <reference anchor="ISO29115">
        <front>
          <title>ITU-T Recommendation X.eaa | ISO/IEC 2nd CD 29115 --
          Information technology - Security techniques - Entity authentication
          assurance framework</title>

          <author fullname="Erika McCallister et al." initials="E"
                  surname="McCallister">
            <organization>National Institute of Standards and
            Technology</organization>
          </author>
        </front>

        <seriesInfo name="ISO/IEC" value="29115" />

        <!-- <annotation>Defines LoA</annotation> -->
      </reference>

      <reference anchor="SP800-63">
        <front>
          <title>NIST SP800-63rev.1: Electronic Authentication
          Guideline</title>

          <author>
            <organization>National Institute of Standards and
            Technology</organization>
          </author>
        </front>

        <seriesInfo name="NIST" value="SP800-63" />

        <format target="http://csrc.nist.gov/publications/drafts/800-63-rev1/SP800-63-Rev1_Dec2008.pdf"
                type="PDF" />

        <!-- <annotation>Defines LoA</annotation> -->
      </reference>

      <reference anchor="ISO639-1">
        <front>
          <title>ISO 639-1:2002. Codes for the representation of names of
          languages -- Part 1: Alpha-2 code</title>

          <author fullname="International Organization for Standardization"
                  initials="" surname="">
            <organization abbrev="ISO">International Organization for
            Standardization</organization>
          </author>

          <date year="2002" />
        </front>
      </reference>

      <reference anchor="ISO3166-1">
        <front>
          <title>ISO 3166-1:1997. Codes for the representation of names of
          countries and their subdivisions -- Part 1: Country codes</title>

          <author fullname="International Organization for Standardization"
                  initials="" surname="">
            <organization abbrev="ISO">International Organization for
            Standardization</organization>
          </author>

          <date year="1997" />
        </front>

        <format target="http://www.w3.org/WAI/ER/IG/ert/iso639.htm"
                type="HTML" />
      </reference>

      <reference anchor="zoneinfo">
        <front>
          <title>The tz database</title>

          <author fullname="" initials="" surname="">
            <organization abbrev="Public">Public Domain</organization>
          </author>

          <date month="June" year="2011" />
        </front>

        <format target="http://www.twinsun.com/tz/tz-link.htm" type="HTML" />
      </reference>
    </references>

    <references title="Informative References">
      <reference anchor="OpenID.2.0">
        <front>
          <title>OpenID Authentication 2.0</title>

          <author fullname="specs@openid.net" initials=""
                  surname="specs@openid.net">
            <organization abbrev="oidf"></organization>
          </author>

          <date year="2007" />
        </front>

        <format target="http://www.openid.net/specs/openid-authentication-2_0.txt"
                type="TXT" />

        <format target="http://www.openid.net/specs/openid-authentication-2_0.html"
                type="HTML" />
      </reference>

      <reference anchor="RESPONSE.TYPES">
        <front>
           <title>OAuth 2.0 Multiple Response Type Encoding Practices</title>
           <author fullname="Breno" initials="B." surname="de Medeiros">
             <organization abbrev="Google">Google, Inc.</organization>
           </author>
           <author fullname="Marius" initials="M." surname="Scurtescu">
             <organization abbrev="Google">Google, Inc.</organization>
             <address>
               <email>mscurtescu@google.com</email>
             </address>
           </author>
           <author fullname="Paul" initials="P." surname="Tarjan">
             <organization abbrev="Facebook"> Facebook</organization>
             <address><email>pt@fb.com</email>
             </address>
           </author>
           <date day="14" month="October" year="2011"></date>
        </front>
      <format target="http://openid.net/specs/oauth-v2-multiple-response-types-1_0.html"
              type="HTML" />
      </reference>
    </references>

    <section title="Acknowledgements">
      <t>As a successor version of OpenID, this specification heavily relies
      on <xref target="OpenID.2.0">OpenID Authentication 2.0</xref>. Please
      refer to Appendix C of OpenID Authentication 2.0 for the full list of
      the contributors for that specification.</t>

      <t>This specification is largely compliant with OAuth 2.0 draft 20.
      Please refer to the OAuth 2.0 specification for the list of
      contributors.</t>

      <t>In addition, the OpenID Community would like to thank the following
      people for the work they've done in the drafting and editing of this
      specification.</t>

      <t><list style="empty">
          <t>Anthony Nadalin (tonynad@microsoft.com), Microsoft</t>

          <t>Axel Nennker (axel.nennker@telekom.de), Deutsche Telekom</t>

          <t>Casper Biering (cb@peercraft.com), Peercraft</t>

          <t>Breno de Medeiros (breno@gmail.com), Google</t>

          <t>Chuck Mortimore (cmortimore@salesforce.com), Salesforce.com</t>

          <t>David Recordon (dr@fb.com), Facebook</t>

          <t>George Fletcher (george.fletcher@corp.aol.com), AOL</t>

          <t>Hideki Nara (hideki.nara@gmail.com), Takt Communications</t>

          <t>John Bradley (jbradely@mac.com), Protiviti Government
          Services</t>

          <t>Michael B. Jones (mbj@microsoft.com), Microsoft</t>

          <t>Nat Sakimura (n-sakimura@nri.co.jp), Nomura Research Institute,
          Ltd.</t>

          <t>Paul Tarjan (pt@fb.com), Facebook</t>

          <t>Ryo Itou (ritou@yahoo-corp.jp), Yahoo! Japan</t>
        </list></t>
    </section>

    <section title="Document History">
      <t>[[ To be removed from the final specification ]]</t>

           <t>-07<list style="symbols">
          <t>Added reference to RFC 5246. per ticket #235.</t>
          <t>Bumped version + date.</t>
          <t>Removed format from user_info member of request Object</t>
          <t>Fix optional claim logic in 3.1.2.1.1</t>
          <t>Moved IANA considerations to Standard</t>
          <t>re #256 added invalid_request_uri and invalid_openid_request_object </t>
          <t>fixes #195 reworked 3.2 </t>

        </list></t>
         <t>-06<list style="symbols">
          <t>Changed section 3.1.4.1 to say the errors are returned as
          defined by the response type not always as query
          paramaters. per ticket #174.</t>
          <t>Bumped version + date.</t>
          <t>Fixed section 3.3.3 to refer to errors in Bearer Token.</t>
          <t>Fixed 3.1.3 to ref the other response types ticket #173.</t>
          <t>Included reference to multiple response types.</t>
          <t>Fixed 3.1.2.1 to indicate default claims in id_token.</t>
          <t>Fixed section 3.2.2 to reference the access token response from the token endpoint 4.1.4.</t>
          <t>Fixed section 3.2.1 to include refresh tokens.</t>
          <t>Fixed section 3.1.1 to be clear on JWT being the token format per ticket #171.</t>
        </list></t>

      <t>-05<list style="symbols">
          <t>Changed check_session to check_id.</t>

          <t>schema=openid now required when requesting UserInfo.</t>

          <t>Removed issued_to, since not well defined.</t>

          <t>Removed display values popup, touch, and mobile, since not well defined.</t>
        </list></t>

      <t>-04 <list style="symbols">
          <t>Changes associated with renaming "Lite" to "Basic Client"
          and replacing "Core" and "Framework" with "Messages" and
          "Standard".</t>

          <t>Numerous cleanups, including updating references.</t>
        </list></t>

      <t>-03 <list style="symbols">
          <t>Added secret_type to the Token endpoint.</t>

    <t>Minor edits to the samples.</t>
        </list></t>

      <t>-02 <list style="symbols">
          <t>Incorporates feedback from Nat Sakimura.</t>
        </list></t>

      <t>-01 <list style="symbols">
          <t>First Draft that incorporates the merge of the Core and Framework
          specs.</t>
        </list></t>
    </section>
  </back>
</rfc>
