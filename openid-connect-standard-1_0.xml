<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd">
<rfc category="exp" docName="openid-connect-standard-1_0" ipr="trust200902">

  <?rfc toc="yes" ?>
  <?rfc tocdepth="5" ?>
  <?rfc symrefs="yes" ?>
  <?rfc sortrefs="yes"?>
  <?rfc strict="yes" ?>
  <?rfc iprnotified="no" ?>
  <?rfc private="Draft" ?>

  <front>
    <title abbrev="OpenID Connect Standard 1.0">OpenID Connect Standard 1.0 - draft 16</title>

    <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
      <organization abbrev="NRI">Nomura Research Institute, Ltd.</organization>
      <address>
        <email>n-sakimura@nri.co.jp</email>
      </address>
    </author>

    <author fullname="John Bradley" initials="J." surname="Bradley">
      <organization abbrev="Ping Identity">Ping Identity</organization>
      <address>
        <email>ve7jtb@ve7jtb.com</email>
      </address>
    </author>

    <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
      <organization abbrev="Microsoft">Microsoft</organization>

      <address>
        <email>mbj@microsoft.com</email>
      </address>
    </author>

    <author fullname="Breno de Medeiros" initials="B." surname="de Medeiros">
      <organization abbrev="Google">Google</organization>
      <address>
        <email>breno@google.com</email>
      </address>
    </author>

    <author fullname="Edmund Jay" initials="E." surname="Jay">
      <organization abbrev="Illumila">Illumila</organization>
      <address>
        <email>ejay@mgi1.com</email>
      </address>
    </author>

    <date day="16" month="January" year="2013" />

    <abstract>
      <t>OpenID Connect 1.0 is a simple identity layer on top of the
      OAuth 2.0 protocol. It allows Clients to verify the
      identity of the End-User based on the authentication performed by
      an Authorization Server, as well as to obtain basic profile information
      about the End-User in an interoperable and RESTful manner.</t>

      <t>OpenID Connect Standard 1.0 is an HTTP protocol binding for
      OpenID Connect Messages 1.0 request and response messages.</t>
    </abstract>
  </front>

  <middle>
    <section anchor='Introduction' title='Introduction'>
      <t>This specification describes the binding of the HTTP
      protocol with the endpoints described in <xref
      target="OpenID.Messages">OpenID Connect Messages 1.0</xref>.</t>

      <section anchor="rnc" title="Requirements Notation and Conventions">
	<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
	"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
	document are to be interpreted as described in <xref
	target="RFC2119"></xref> .</t>

	<t>Throughout this document, values are quoted to indicate that they are
	to be taken literally. When using these values in protocol messages, the
	quotes MUST NOT be used as part of the value.</t>
      </section>

      <section anchor="terminology" title="Terminology">
	<t>This specification uses the terms "Access Token", "Refresh Token",
	"Authorization Code", "Authorization Grant", "Authorization Server",
	"Authorization Endpoint", "Client", "Client Identifier", "Client
	Secret", "Protected Resource", "Resource Owner", "Resource Server", and
	"Token Endpoint" defined by
	<xref target="RFC6749">OAuth 2.0</xref>,
	and the terms defined by
	<xref target="OpenID.Messages">OpenID Connect Messages 1.0</xref>.
	This specification also defines the following terms:
	  <list style="hanging">
	    <t hangText="Request File">Document whose contents
	    is an OpenID Request Object representing a set of Authorization Request
	    parameters.</t>

	    <t hangText="Request File URI">URL that references a Request File.
	    The Request File contents MUST be retrievable by the
	    Authorization Server.</t>
	  </list></t>
      </section>
    </section>

    <section anchor="AuthorizationEndpoint" title="Authorization Endpoint">
      <t>The Authorization Endpoint performs authentication services for the
      End-User and requests authorization from the End-User to release
      information to OpenID Connect Relying Party Clients. When an End-User 
      accesses a Relying Party Client application that requires
      the End-User's identifier and other information, it sends the End-User to
      the Authorization Server's Authorization Endpoint for authentication and
      authorization. The Authorization Server then issues an ID Token that
      asserts the End-User's identifier and an Access Token that allows the
      Client to access the End-User's information at Protected Resource
      endpoints. Protected Resource endpoints MAY perform different actions or
      return different information based on the scopes associated with the 
      presented Access Token.
      Clients MUST specify 
      how the Access Token and ID Token are to be returned using the
      <spanx style="verb">response_type</spanx>
      parameter in the Authorization Request.
      </t>

      <section title="OpenID Connect Scopes" anchor="scopes">
        <t>Clients MUST specify the desired scopes in an Authorization Request to
        obtain an Access Token with the proper permissions.
        The scope names used by OpenID Connect are defined in
	Section 2.1.2 of <xref target="OpenID.Messages">OpenID Connect Messages 1.0</xref>.</t>
        
        <t>The Authorization Server MAY fully or partially ignore the scope values
         requested by the Client based on the Authorization Server policy or
         the End-User's instructions.
        A Client may elect to
        only request a subset of the information available from the
        UserInfo Endpoint.</t>

        <t><figure>
            <preamble>The following is a non-normative example of a <spanx style="verb">scope</spanx>
            parameter in an Authorization Request:</preamble>

            <artwork><![CDATA[scope=openid profile email phone]]></artwork>
          </figure></t>
      </section>
      
      <section anchor="protocol_flows" title="Protocol Flows">

        <t>Authorization Requests follow two main paths to obtain Access Tokens
        and ID Tokens, the Implicit Flow and the Authorization Code Flow. The 
        flows determine how the Access Token and ID Token are returned to the 
        Client. Access Tokens are credentials used to access Protected 
        Resources, as defined in Section 1.4 of 
        <xref target="RFC6749">OAuth 2.0</xref>. Access Tokens represent 
        a Resource Owner's authorization and MUST NOT be exposed to 
        unauthorized parties.</t>

        <t>The Implicit Flow is mainly used by Clients implemented in a browser
        using a scripting language. The Access Token and ID Token are returned
        directly to the Client, which MAY expose them to the Resource Owner and
        other applications that have access to the Resource Owner's User-Agent.
        The Authorization Server does not perform Client authentication before
        issuing the Access Token.</t>

        <t>The Authorization Code Flow returns an Authorization Code to the
        Client, which can then exchange it for an Access Token directly. This
        provides the added benefit of not exposing the Access Token to the 
        Resource Owner and possibly other malicious applications with access
        to the Resource Owner's User-Agent. The Authorization Server can also
        authenticate the Client before exchanging the Authorization Code for an
        Access Token. The Authorization Code flow is suitable for Clients that 
        can securely maintain a Client Secret between themselves and the
        Authorization Server whereas the Implicit flow is suitable for Clients
        that cannot.</t>

        <section anchor="retrieving_code_token" 
                 title="How to Get Authorization Code, Access Token, and ID Token">
          <t>In this specification, the Client sends authorization request 
          to the Authorization Endpoint through the User Agent to obtain the 
          Access Token and ID Token. It MAY obtain them from the Authorization 
          Endpoint or from Token Endpoint utilizing the <spanx style="verb">
          code</spanx> that it obtained from the Authorization Endpoint. 
          The latter is called <xref target="code_flow">Code Flow</xref> 
          and the former is called <xref target="implicit_flow">Implicit Flow
          </xref>. 
          </t>
          
        </section>

        <section anchor="code_flow" title="Authorization Code Flow">
          <t>The Authorization Code Flow goes through the following
          steps.</t>          
          <t><list style="numbers">
              <t>Client prepares an Authorization Request containing the desired
              request parameters.</t>

              <t>Client sends a request to the Authorization Server.</t>

              <t>Authorization Server Authenticates the End-User.</t>

              <t>Authorization Server Obtains the End-User
              Consent/Authorization.</t>

              <t>Authorization Server Sends the End-User back to the Client with
              an Authorization Code.</t>

              <t>Client requests a response using the Authorization Code at the
              <xref target="token_ep">Token Endpoint</xref>.</t>

              <t>Client receives a response that contains an Access Token and ID
              Token in the response body.</t>

              <t>Client validates the ID Token and retrieves the End-User's
              subject identifier.</t>

              <t>(OPTIONAL) Client accesses the <xref 
              target="userinfo_ep">UserInfo Endpoint</xref>  with the Access
              Token.</t>

              <t>(OPTIONAL) Client receives UserInfo Response.</t>
             </list>Note that in each step, the party that receives a message
          MUST validate it according to the validation rules in <xref
          target="OpenID.Messages">OpenID Connect Messages 1.0</xref>.</t>
        </section>

        <section anchor="implicit_flow" title="Implicit Flow">
          <t>The Implicit Flow follows the following steps:</t>

          <t><list style="numbers">
              <t>Client prepares an Authorization Request containing the desired
              request parameters.</t>

              <t>Client sends a request to the Authorization Server.</t>

              <t>Authorization Server Authenticates the End-User.</t>

              <t>Authorization Server Obtains the End-User
              Consent/Authorization.</t>

              <t>Authorization Server Sends the End-User back to the Client with
              an Access Token and an ID Token if requested.</t>

              <t>Client validates the ID Token and retrieves the End-User's
              subject identifier.</t>

              <t>(OPTIONAL) Client accesses the <xref 
              target="userinfo_ep">UserInfo Endpoint</xref>  with the Access
              Token.</t>

              <t>(OPTIONAL) Client receives UserInfo Response.</t>
             </list>Note that in each step, the party that receives a message
          MUST validate it according to the validation rules in <xref
          target="OpenID.Messages">OpenID Connect Messages 1.0</xref>.</t>
        </section>

      </section>

      <section anchor="auth_request" title="Authorization Request">
        <t>When the End-User wishes to access a Protected Resource and the
        End-User Authorization has not yet been obtained, the Client
        prepares an Authorization Request to the Authorization Endpoint.</t>

        <t>Authorization Servers MUST require the use of a transport-layer
        security mechanism at the Authorization Endpoint. The Authorization 
        Server MUST support TLS 1.2 <xref target="RFC5246">RFC 5246</xref>
	and/or TLS 1.0 <xref target='RFC2246' />
	and MAY support other transport-layer 
        mechanisms with equivalent security.</t>

        <t>Authorization Servers MUST support the use of the HTTP "GET" and 
        "POST" methods defined in <xref target="RFC2616">RFC 2616</xref> at the
        Authorization Endpoint. </t>

        <t>Clients MAY use the HTTP "GET" or "POST" method to send the
        Authorization Request to the Authorization Server. If using the HTTP
        "GET" method, the request parameters are serialized using URI <xref
        target="qss">query string serialization</xref>. If using the HTTP "POST"
        method, the request parameters are serialized using 
        <xref target="form_serialization">form serialization</xref>.</t>

        <section anchor="AuthParams"
                 title="Client Prepares Authorization Request">
          <t>The Client prepares an Authorization Request to the Authorization
          Endpoint with the request parameters using the HTTP "GET" or "POST"
          method. The scheme used in the Authorization URL MUST be HTTPS.
	  The Client MUST perform a TLS/SSL server certificate check, per
	  <xref target="RFC6125">RFC 6125</xref>.
	  </t>

          <t>The required Authorization Request parameters are as follows:</t>

          <t><list style="hanging">
              <t hangText="response_type">OAuth 2.0 registered
              response type value that determines how the Authorization
              Response is returned to the Client.  As described in
              <xref target="OAuth.Responses">OAuth 2.0 Multiple Response Type Encoding Practices</xref>,
              the following registered values are supported:
                <list style="symbols">
                  <t><spanx style="verb">code</spanx></t>

                  <t><spanx style="verb">code id_token</spanx></t>
                  
                  <t><spanx style="verb">id_token</spanx></t>

                  <t><spanx style="verb">token</spanx></t>

                  <t><spanx style="verb">token id_token</spanx></t>

                  <t><spanx style="verb">code token</spanx></t>

                  <t><spanx style="verb">code token id_token</spanx></t>
                </list></t>

              <t hangText="client_id">OAuth 2.0 Client identifier.</t>

              <t hangText="scope">
		OAuth 2.0 <spanx style="verb">scope</spanx> value.
		It MUST include <spanx style="verb">openid</spanx>
              as one of the space delimited ASCII strings.
	      A non-exclusive list of other values that MAY be included are
              <spanx style="verb">profile</spanx>,
	      <spanx style="verb">email</spanx>,
              <spanx style="verb">address</spanx>,
	      <spanx style="verb">phone</spanx>,
	      and <spanx style="verb">offline_access</spanx>.
              These values specify an additive list of Claims that are returned
              from the UserInfo Endpoint.</t>

              <t hangText="redirect_uri">Redirection URI to which the response
              will be sent. The Scheme, Host, Path, and Query Parameter segments of this URI MUST 
              match one of the <spanx style="verb">redirect_uris</spanx> registered 
              for the <spanx style="verb">client_id</spanx> in the <xref
	      target="OpenID.Registration">OpenID Connect Dynamic Client 
	      Registration 1.0</xref> specification.</t>

            </list></t>

          <t>The request MAY contain the following OPTIONAL and sometimes REQUIRED parameters:</t>

          <t><list style="hanging">

             <t hangText="nonce">String value used to associate a Client session 
              with an ID Token, and to mitigate replay attacks. 
              The value is passed through unmodified from the Authorization Request to the ID Token.
               Use of the nonce is REQUIRED when using the implicit flow
	           and OPTIONAL when using the code flow.</t>

              <t hangText="state">Opaque value used to maintain state
              between the request and the callback.</t>

               <t hangText="request">OpenID Request Object value.</t>

              <t hangText="request_uri">URL that references an OpenID
              Request Object.</t>

              <t hangText="display">ASCII string value that specifies
              how the Authorization Server displays the authentication page to
              the End-User. Refer to
	      Section 2.1.2 of <xref target="OpenID.Messages">OpenID Connect Messages 1.0</xref>
	      for more information.</t>

              <t hangText="prompt">Space delimited list of ASCII strings
	      that can contain the values
              <spanx style="verb">login</spanx>, <spanx style="verb">consent</spanx>,
              <spanx style="verb">select_account</spanx>, and
	      <spanx style="verb">none</spanx>. Refer to <xref
              target="OpenID.Messages">OpenID Connect Messages 1.0</xref> for
              more information.</t>
              <t hangText="id_token_hint">ID Token
              passed to the Authorization server as a hint. Refer to <xref
              target="OpenID.Messages">OpenID Connect Messages 1.0</xref> for
              more information.</t>
            </list></t>

          <t>There are three methods to construct and send the request to the 
          Authorization Endpoint: 
          <list style="letters">
              <t>Simple Request Method</t>

              <t>Request Parameter Method</t>

              <t>Request File Method</t>
          </list></t>

          <t>The Simple Request Method is used in simple cases when default
          UserInfo and ID Token Claims are desired.</t>

          <t>The Request Parameter Method is used by sending an OpenID Request
          Object when the Client desires to retrieve a different set of
          UserInfo and ID Token Claims. The request parameter method also
          allows requests to be signed or encrypted. </t>

          <t>The Request File Method works similarly to the Request Parameter
          Method but differs in that it sends an URL as a reference to the
          OpenID Request Object. It enables large requests to be sent
          securely and compactly even on user agents with limited capabilities.
          Clients MAY use the Request File Method to minimize the request
          size.</t>

          <section anchor="SimpleRequestMethod" title="Simple Request Method">
            <t>The Client prepares an Authorization Request to the
            Authorization Endpoint using the appropriate parameters. If using 
            the HTTP "GET" method, the request parameters are serialized using
            URI <xref target="qss">query string serialization</xref>. If using
            the HTTP "POST" method, the request parameters are serialized using 
            <xref target="form_serialization">form serialization</xref>.</t>

            <t><figure>
                <preamble>The following is a non-normative example of an
                Authorization Request URL
		(with line wraps for display purposes only):</preamble>

                <artwork><![CDATA[https://server.example.com/op/authorize?
response_type=code%20id_token
&client_id=s6BhdRkqt3
&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb
&scope=openid
&nonce=n-0S6_WzA2Mj
&state=af0ifjsldkj]]></artwork>
              </figure></t>

            <section anchor="norm_req"
                     title="Client Sends Request to Authorization Server">
              <t>Having constructed the Authorization Request, the Client sends it
              to the HTTPS End-User Authorization Endpoint. This
              MAY happen via HTTPS redirect, hyperlinking, or any other means
              of directing the User-Agent to the Authorization Endpoint URL.</t>

              <figure>
		<preamble>Following is a non-normative example using HTTP redirect
		(with line wraps for display purposes only):</preamble>

                <artwork><![CDATA[HTTP/1.1 302 Found
Location: https://server.example.com/authorize?
response_type=code%20id_token
&client_id=s6BhdRkqt3
&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb
&scope=openid
&nonce=n-0S6_WzA2Mj
&state=af0ifjsldkj]]></artwork>
              </figure>
            </section>
          </section>

          <section title="Request Parameter Method" anchor="req_param_method">
            <t>The Client prepares an Authorization Request to the
            Authorization Endpoint using the appropriate HTTP parameter
            serialization. The Client SHOULD construct the request using the
            HTTP "POST" method, but MAY use the HTTP "GET" method.</t>

            <t>The Authorization Request MUST include the 
            <spanx style="verb">request</spanx> parameter defined in <xref
            target="AuthParams" />.
	    The Authorization Request MUST NOT include the 
            <spanx style="verb">request_uri</spanx> parameter.</t>

            <t>The <spanx style="verb">request</spanx> parameter is
	      an OpenID Request Object
              that contains the Authorization Request and also
              specifies the contents of
              the responses to be returned from the UserInfo 
              Endpoint. The OpenID Request Object MAY be signed or signed and encrypted via
              <xref target="JWS">JWS</xref> and <xref target="JWE">JWE</xref>
              respectively, thereby providing authentication, integrity,
              non-repudiation and/or confidentiality.</t>

            <t><figure>
                <preamble>The following is a non-normative example of an
                OpenID Request Object before base64url encoding and signing:</preamble>

                <artwork><![CDATA[{
  "response_type": "code id_token",
  "client_id": "s6BhdRkqt3",
  "redirect_uri": "https://client.example.org/cb",
  "scope": "openid profile",
  "state": "af0ifjsldkj",
  "nonce": "n-0S6_WzA2Mj",
  "userinfo": 
    {
      "claims": 
        {
          "name": {"essential": true},
          "nickname": null,
          "email": {"essential": true},
          "email_verified": {"essential": true},
          "picture": null
        }
    },
    "id_token": 
      {
        "max_age": 86400,
        "claims": 
          {
            "gender": null,
            "birthdate": {"essential": true},
            "acr": {"values": ["2"]}
          }
      }
}]]></artwork>
              </figure> <figure>
                <preamble>The following is a non-normative example of
		an OpenID Request Object before base64url encoding and signing
		(with line wraps within the values for display purposes only):</preamble>

                <artwork><![CDATA[algorithm = RS256

JSON Encoded Header =  {"alg":"RS256"}
JSON Encoded Payload =
    {
      "response_type": "code id_token",
      "client_id": "s6BhdRkqt3",
      "redirect_uri": "https://client.example.org/cb",
      "scope": "openid profile",
      "state": "af0ifjsldkj",
      "nonce": "n-0S6_WzA2Mj",
      "userinfo": 
        {
          "claims": 
            {
              "name": {"essential": true},
              "nickname": null,
              "email": {"essential": true},
              "email_verified": {"essential": true},
              "picture": null
            }
        },
        "id_token": 
          {
            "max_age": 86400,
            "claims": 
              {
                "gender": null,
                "birthdate": {"essential": true},
                "acr": {"values": ["2"]}
              }
          }
    }
    
OpenID Request Object =
    eyJhbGciOiJSUzI1NiJ9.ew0KICAicmVzcG9uc2VfdHlwZSI6ICJjb2RlIGlkX3Rv
    a2VuIiwNCiAgImNsaWVudF9pZCI6ICJzNkJoZFJrcXQzIiwNCiAgInJlZGlyZWN0X
    3VyaSI6ICJodHRwczovL2NsaWVudC5leGFtcGxlLm9yZy9jYiIsDQogICJzY29wZS
    I6ICJvcGVuaWQgcHJvZmlsZSIsDQogICJzdGF0ZSI6ICJhZjBpZmpzbGRraiIsDQo
    gICJub25jZSI6ICJuLTBTNl9XekEyTWoiLA0KICAidXNlcmluZm8iOiANCiAgICB7
    DQogICAgICAiY2xhaW1zIjogDQogICAgICAgIHsNCiAgICAgICAgICAibmFtZSI6I
    HsiZXNzZW50aWFsIjogdHJ1ZX0sDQogICAgICAgICAgIm5pY2tuYW1lIjogbnVsbC
    wNCiAgICAgICAgICAiZW1haWwiOiB7ImVzc2VudGlhbCI6IHRydWV9LA0KICAgICA
    gICAgICJlbWFpbF92ZXJpZmllZCI6IHsiZXNzZW50aWFsIjogdHJ1ZX0sDQogICAg
    ICAgICAgInBpY3R1cmUiOiBudWxsDQogICAgICAgIH0NCiAgICB9LA0KICAgICJpZ
    F90b2tlbiI6IA0KICAgICAgew0KICAgICAgICAibWF4X2FnZSI6IDg2NDAwLA0KIC
    AgICAgICAiY2xhaW1zIjogDQogICAgICAgICAgew0KICAgICAgICAgICAgImdlbmR
    lciI6IG51bGwsDQogICAgICAgICAgICAiYmlydGhkYXRlIjogeyJlc3NlbnRpYWwi
    OiB0cnVlfSwNCiAgICAgICAgICAgICJhY3IiOiB7InZhbHVlcyI6IFsiMiJdfQ0KI
    CAgICAgICAgIH0NCiAgICAgIH0NCn0.QO_PD7FOnOaDULViVR-a4RmgyZA-wz1p4a
    KiD8ucktrF2o62PmntJC6vR1Ne_rWXZaybM4ZFN_HzFmakwYMqrp-HBfcegj5-ifv
    wSOAo-EfQrr88Jd40rrnH-KdkjQQiu5BiE513o4XK-1p7lG8RmbQc3EJwJTimNC4E
    ijk1wp2D99IndyH9CrOp_M5X15iQjGGF65IWb-9ly1waEiJMFrO2BuDTKpImcjKe9
    odgtWRyZWs8KhfVwLVkrazhf8E08TEqK8Vuohg8FoCLLaw66IN4EVBMcEnncNyHId
    77ZeVOB-KGHJdIo75W7pc68GUc5dg1NXpBF2UqtHmoXVGisQ
    
The following is the RSA public key information that can be used
to validate the OpenID Request Object signature in the above example.
The values are an array of hexadecimal digits in big endian format.
                
modulus: 
[
  cb,d2,ea,bf,87,c2,a7,a1,22,fa,ed,be,64,22,aa,f3,
  76,2f,6c,51,24,e8,93,2c,fe,94,a3,ef,a7,8c,91,d7,
  56,46,e5,97,d9,a0,4a,18,70,2d,2a,51,39,3f,bf,ef,
  9f,ff,cf,08,a6,56,78,fb,77,bc,69,01,e9,e3,e0,cc,
  01,6e,d3,c3,66,29,e9,b0,13,96,d0,23,47,ba,90,80,
  a1,b6,df,fa,2b,34,f9,39,a6,97,0c,52,3a,a8,22,c9,
  9a,4e,75,09,ce,15,60,56,b1,82,a7,af,32,77,18,af,
  36,96,ff,9d,26,67,5c,86,48,52,10,cc,b6,0f,f1,b8,
  a3,00,71,95,8d,d1,05,81,96,99,10,df,65,b2,7f,c6,
  75,62,da,26,91,eb,07,74,4e,95,2e,74,13,8e,70,c6,
  b9,60,f7,13,27,71,56,fc,a8,33,ee,5d,96,ab,be,08,
  4b,2f,41,f3,3a,e6,11,69,d0,49,56,85,99,a3,00,cd,
  4e,92,a9,93,64,64,95,9e,d0,68,13,bb,5c,3b,f7,b9,
  1e,ec,fe,c7,f6,83,e6,c0,8d,26,31,61,41,ac,aa,43,
  40,f5,bd,f1,55,6e,77,6a,6f,d4,65,9d,ed,65,b1,53,
  22,1e,79,ec,92,02,58,a1,e5,5a,3e,6e,cd,e2,57,6b 
]

exponent: [01,00,01]    
    
    ]]></artwork>
              </figure></t>

            <t><figure>
                <preamble>The following is a non-normative example of an
                Authorization Request with the OpenID Request Method
                (with line wraps within the values for display purposes only):
                </preamble>

                <artwork><![CDATA[https://server.example.com/authorize?
response_type=code%02id_token
&client_id=s6BhdRkqt3
&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb
&scope=openid
&state=af0ifjsldkj
&nonce=n-0S6_WzA2Mj
&request=eyJhbGciOiJSUzI1NiJ9.ew0KICAicmVzcG9uc2VfdHlwZSI6ICJjb2
RlIGlkX3Rva2VuIiwNCiAgImNsaWVudF9pZCI6ICJzNkJoZFJrcXQzIiwNCiAgIn
JlZGlyZWN0X3VyaSI6ICJodHRwczovL2NsaWVudC5leGFtcGxlLm9yZy9jYiIsDQ
ogICJzY29wZSI6ICJvcGVuaWQgcHJvZmlsZSIsDQogICJzdGF0ZSI6ICJhZjBpZm
pzbGRraiIsDQogICJub25jZSI6ICJuLTBTNl9XekEyTWoiLA0KICAidXNlcmluZm
8iOiANCiAgICB7DQogICAgICAiY2xhaW1zIjogDQogICAgICAgIHsNCiAgICAgIC
AgICAibmFtZSI6IHsiZXNzZW50aWFsIjogdHJ1ZX0sDQogICAgICAgICAgIm5pY2
tuYW1lIjogbnVsbCwNCiAgICAgICAgICAiZW1haWwiOiB7ImVzc2VudGlhbCI6IH
RydWV9LA0KICAgICAgICAgICJlbWFpbF92ZXJpZmllZCI6IHsiZXNzZW50aWFsIj
ogdHJ1ZX0sDQogICAgICAgICAgInBpY3R1cmUiOiBudWxsDQogICAgICAgIH0NCi
AgICB9LA0KICAgICJpZF90b2tlbiI6IA0KICAgICAgew0KICAgICAgICAibWF4X2
FnZSI6IDg2NDAwLA0KICAgICAgICAiY2xhaW1zIjogDQogICAgICAgICAgew0KIC
AgICAgICAgICAgImdlbmRlciI6IG51bGwsDQogICAgICAgICAgICAiYmlydGhkYX
RlIjogeyJlc3NlbnRpYWwiOiB0cnVlfSwNCiAgICAgICAgICAgICJhY3IiOiB7In
ZhbHVlcyI6IFsiMiJdfQ0KICAgICAgICAgIH0NCiAgICAgIH0NCn0.QO_PD7FOnO
aDULViVR-a4RmgyZA-wz1p4aKiD8ucktrF2o62PmntJC6vR1Ne_rWXZaybM4ZFN_
HzFmakwYMqrp-HBfcegj5-ifvwSOAo-EfQrr88Jd40rrnH-KdkjQQiu5BiE513o4
XK-1p7lG8RmbQc3EJwJTimNC4Eijk1wp2D99IndyH9CrOp_M5X15iQjGGF65IWb-
9ly1waEiJMFrO2BuDTKpImcjKe9odgtWRyZWs8KhfVwLVkrazhf8E08TEqK8Vuoh
g8FoCLLaw66IN4EVBMcEnncNyHId77ZeVOB-KGHJdIo75W7pc68GUc5dg1NXpBF2
UqtHmoXVGisQ
]]></artwork>
              </figure></t>

            <section anchor="request_req"
                     title="Client Sends Request to Authorization Server">
              <t>Having constructed the Authorization Request, the Client sends
              it to the HTTPS Authorization Endpoint. This
              MAY happen via HTTPS redirect, hyperlinking, or any other means
              of directing the User-Agent to the Authorization Endpoint.</t>

              <figure>
		<preamble>Following is a non-normative example using HTTP redirect
		(with line wraps for display purposes only):</preamble>

                <artwork><![CDATA[HTTP/1.1 302 Found
Location: https://server.example.com/authorize?
response_type=code%20id_token
&client_id=s6BhdRkqt3
&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb
&scope=openid
&state=af0ifjsldkj
&nonce=n-0S6_WzA2Mj
&request=eyJhbGciOiJSUzI1NiJ9.ew0KICAicmVzcG9uc2VfdHlwZSI6ICJjb2
RlIGlkX3Rva2VuIiwNCiAgImNsaWVudF9pZCI6ICJzNkJoZFJrcXQzIiwNCiAgIn
JlZGlyZWN0X3VyaSI6ICJodHRwczovL2NsaWVudC5leGFtcGxlLm9yZy9jYiIsDQ
ogICJzY29wZSI6ICJvcGVuaWQgcHJvZmlsZSIsDQogICJzdGF0ZSI6ICJhZjBpZm
pzbGRraiIsDQogICJub25jZSI6ICJuLTBTNl9XekEyTWoiLA0KICAidXNlcmluZm
8iOiANCiAgICB7DQogICAgICAiY2xhaW1zIjogDQogICAgICAgIHsNCiAgICAgIC
AgICAibmFtZSI6IHsiZXNzZW50aWFsIjogdHJ1ZX0sDQogICAgICAgICAgIm5pY2
tuYW1lIjogbnVsbCwNCiAgICAgICAgICAiZW1haWwiOiB7ImVzc2VudGlhbCI6IH
RydWV9LA0KICAgICAgICAgICJlbWFpbF92ZXJpZmllZCI6IHsiZXNzZW50aWFsIj
ogdHJ1ZX0sDQogICAgICAgICAgInBpY3R1cmUiOiBudWxsDQogICAgICAgIH0NCi
AgICB9LA0KICAgICJpZF90b2tlbiI6IA0KICAgICAgew0KICAgICAgICAibWF4X2
FnZSI6IDg2NDAwLA0KICAgICAgICAiY2xhaW1zIjogDQogICAgICAgICAgew0KIC
AgICAgICAgICAgImdlbmRlciI6IG51bGwsDQogICAgICAgICAgICAiYmlydGhkYX
RlIjogeyJlc3NlbnRpYWwiOiB0cnVlfSwNCiAgICAgICAgICAgICJhY3IiOiB7In
ZhbHVlcyI6IFsiMiJdfQ0KICAgICAgICAgIH0NCiAgICAgIH0NCn0.QO_PD7FOnO
aDULViVR-a4RmgyZA-wz1p4aKiD8ucktrF2o62PmntJC6vR1Ne_rWXZaybM4ZFN_
HzFmakwYMqrp-HBfcegj5-ifvwSOAo-EfQrr88Jd40rrnH-KdkjQQiu5BiE513o4
XK-1p7lG8RmbQc3EJwJTimNC4Eijk1wp2D99IndyH9CrOp_M5X15iQjGGF65IWb-
9ly1waEiJMFrO2BuDTKpImcjKe9odgtWRyZWs8KhfVwLVkrazhf8E08TEqK8Vuoh
g8FoCLLaw66IN4EVBMcEnncNyHId77ZeVOB-KGHJdIo75W7pc68GUc5dg1NXpBF2
UqtHmoXVGisQ]]></artwork>
              </figure>
            </section>
          </section>

          <section title="Request File Method" anchor="Request_File_Method">
            <t>The Request File Method differs from the other methods in that
            it uses a Request File that contains an
            OpenID Request Object. It then sends the Request File URL as
            part of the Authorization Request.</t>

            <t>The Client prepares an Authorization Request using the desired 
            HTTP "GET" or "POST" method. The Client SHOULD use the HTTP "GET"
            method, but MAY use the HTTP "POST" method.
	    The scheme used in the Authorization URL MUST be HTTPS.
	    The Client MUST perform a TLS/SSL server certificate check, per
	    <xref target="RFC6125">RFC 6125</xref>.
	    </t>

            <t> The Authorization Request MUST NOT include the 
            <spanx style="verb">request</spanx> parameter. The Authorization
            Request MUST include the <spanx style="verb">request_uri</spanx>
            parameter. The contents of the target of the URL must be an
            OpenID Request Object. The scheme used in the 
            <spanx style="verb">request_uri</spanx> value MUST be HTTPS, 
            unless the target OpenID Request Object is signed in a way that is verifiable by the 
            Authorization Server.
            The <spanx style="verb">request_uri</spanx> value MUST be reachable by the
            Authorization Server, and SHOULD be reachable by the Client.
            </t>

            <t><figure>
                <preamble>Following is a non-normative example of a Request File
		(with line wraps for display purposes only):</preamble>

                <artwork><![CDATA[
eyJhbGciOiJSUzI1NiJ9.ew0KICAicmVzcG9uc2VfdHlwZSI6ICJjb2RlIGlkX3R
va2VuIiwNCiAgImNsaWVudF9pZCI6ICJzNkJoZFJrcXQzIiwNCiAgInJlZGlyZWN
0X3VyaSI6ICJodHRwczovL2NsaWVudC5leGFtcGxlLm9yZy9jYiIsDQogICJzY29
wZSI6ICJvcGVuaWQgcHJvZmlsZSIsDQogICJzdGF0ZSI6ICJhZjBpZmpzbGRraiI
sDQogICJub25jZSI6ICJuLTBTNl9XekEyTWoiLA0KICAidXNlcmluZm8iOiANCiA
gICB7DQogICAgICAiY2xhaW1zIjogDQogICAgICAgIHsNCiAgICAgICAgICAibmF
tZSI6IHsiZXNzZW50aWFsIjogdHJ1ZX0sDQogICAgICAgICAgIm5pY2tuYW1lIjo
gbnVsbCwNCiAgICAgICAgICAiZW1haWwiOiB7ImVzc2VudGlhbCI6IHRydWV9LA0
KICAgICAgICAgICJlbWFpbF92ZXJpZmllZCI6IHsiZXNzZW50aWFsIjogdHJ1ZX0
sDQogICAgICAgICAgInBpY3R1cmUiOiBudWxsDQogICAgICAgIH0NCiAgICB9LA0
KICAgICJpZF90b2tlbiI6IA0KICAgICAgew0KICAgICAgICAibWF4X2FnZSI6IDg
2NDAwLA0KICAgICAgICAiY2xhaW1zIjogDQogICAgICAgICAgew0KICAgICAgICA
gICAgImdlbmRlciI6IG51bGwsDQogICAgICAgICAgICAiYmlydGhkYXRlIjogeyJ
lc3NlbnRpYWwiOiB0cnVlfSwNCiAgICAgICAgICAgICJhY3IiOiB7InZhbHVlcyI
6IFsiMiJdfQ0KICAgICAgICAgIH0NCiAgICAgIH0NCn0.QO_PD7FOnOaDULViVR-
a4RmgyZA-wz1p4aKiD8ucktrF2o62PmntJC6vR1Ne_rWXZaybM4ZFN_HzFmakwYM
qrp-HBfcegj5-ifvwSOAo-EfQrr88Jd40rrnH-KdkjQQiu5BiE513o4XK-1p7lG8
RmbQc3EJwJTimNC4Eijk1wp2D99IndyH9CrOp_M5X15iQjGGF65IWb-9ly1waEiJ
MFrO2BuDTKpImcjKe9odgtWRyZWs8KhfVwLVkrazhf8E08TEqK8Vuohg8FoCLLaw
66IN4EVBMcEnncNyHId77ZeVOB-KGHJdIo75W7pc68GUc5dg1NXpBF2UqtHmoXVG
isQ]]></artwork>
              </figure></t>

            <section anchor="rurl_create"
                     title="Client Generates the URL of the Request File">
              <t>The Client then stores the Request File either locally or remotely.
               This is the Request URI, <spanx style="verb">"request_uri"</spanx>. 
               The URI MAY be appended with the base64url encoded SHA-256 hash of the file 
               after "#" so that the Authorization Server can detect whether the file 
               has changed. </t>

              <t>It should be noted that if the Request File includes user's attribute 
              values, it MUST NOT be revealed to anybody but the Authorization Server. 
              As such, the <spanx style="verb">"request_uri"</spanx> MUST have
              appropriate entropy for its lifetime, 
              and must be removed after successful authentication or a reasonable timeout.
              </t>
              <t>The Client then records the Request File either locally or
              remotely and obtains the Request File URI, <spanx style="verb">"request_uri"</spanx>.
              </t>
              <figure>
                <preamble>Following is a non-normative example
		(with line wraps for display purposes only):</preamble>

                <artwork><![CDATA[https://client.example.org/rf.txt
#V4pDyha4i12w7CrRxcSh9_GK562EW2y8MzxEGhXfdpk]]></artwork>
              </figure>


            </section>

            <section anchor="art_req"
                     title="Client Sends Request to Authorization Server via HTTPS Redirect">
              <t>The Client sends the Authorization Request to the Authorization
              Endpoint.</t>

              <t>The entire URL MUST NOT exceed 512 bytes.</t>

              <figure>
                <preamble>Following is a non-normative example
		(with line wraps for display purposes only):</preamble>

                <artwork><![CDATA[HTTP/1.1 302 Found
Location: https://server.example.com/authorize
?response_type=code%20id_token
&client_id=s6BhdRkqt3
&request_uri=https%3A%2F%2Fclient.example.org%2Frf.txt
%23V4pDyha4i12w7CrRxcSh9_GK562EW2y8MzxEGhXfdpk
&state=af0ifjsldkj&nonce=n-0S6_WzA2Mj&scope=openid]]></artwork>
              </figure>
            </section>

            <section anchor="FetchesRequestFile" title="Authorization Server Fetches Request File">
              <t>Upon receipt of the Request, the Authorization Server MUST
              send a GET request to the <spanx style="verb">request_uri</spanx>
              to retrieve the content unless it is already cached and parse it
              to recreate the Authorization Request parameters.</t>

              <t>Note that the RP SHOULD use a unique URI for each
              request utilizing distinct parameters, or otherwise
              prevent the Authorization Server from caching the <spanx style="verb">request_uri</spanx>.
              </t>

              <figure>
                <preamble>Following is a non-normative example of this fetch
                process:</preamble>

                <artwork><![CDATA[GET /rf.txt HTTP/1.1
Host: client.example.org]]></artwork>
              </figure>
            </section>
          </section>
        </section>

	<section anchor="ValidatesRequestObject" title="Authorization Server Validates Request Object">

          <t>The Authorization Server validates the request according to 
	  Section 5.1 of <xref target="OpenID.Messages">OpenID Connect Messages 1.0</xref>.</t>
	</section>

        <section anchor="Authenticates" title="Authorization Server Authenticates End-User">

          <t>The Authorization Server validates the request to ensure all
          required parameters are present and valid. If the request is valid,
          the Authorization Server MUST authenticate the End-User. The way in
          which the Authorization Server authenticates the End-User (e.g.
          username and password login, session cookies) is beyond the scope of
          this specification. An authentication user interface MAY be displayed
          by the Authorization Server depending on the authentication method
          used.</t>

          <t>The Authorization Server MUST attempt to authenticate the 
          End-User in the following cases:
          <list style="symbols">
                <t>The End-User is not already authenticated by the Authorization
                Server.</t>

                <t>The Authorization Request contains the <spanx 
                style="verb">prompt</spanx> parameter with the value
		<spanx style="verb">login</spanx>. The
                Authorization Server MUST reauthenticate the End-User
                even if the End-User is already authenticated.</t>
          </list></t>
          <t>The Authorization Server MUST NOT attempt authentication
          in the following cases:
          <list style="symbols">
                <t>The Authorization Request contains the <spanx 
                style="verb">"prompt"</spanx> parameter with the value
		<spanx style="verb">none</spanx>.
                The Authorization Server MUST return an error if the End-User is 
                unauthenticated.</t>
          </list></t>
        </section>

        <section anchor="Consent" title="Authorization Server Obtains End-User Consent/Authorization">

          <t>Once the End-User is authenticated, the Authorization Server MUST
          obtain an authorization decision. This MAY be done by presenting the
          End-User with a dialogue that allows the End-User to recognize what he is
          consenting to and obtain his consent or by establishing consent via
          other means (for example, via previous administrative consent).</t>

          <t>The Authorization Server MUST attempt to request authorization
          from the End-User in the following cases:
          <list style="symbols">
                <t>The End-User has not pre-authorized the Client for the
                authorization request.</t>

                <t>The Authorization Request contains the <spanx 
                style="verb">prompt</spanx> parameter with the value
		<spanx style="verb">consent</spanx>. The
                Authorization Server MUST request End-User authorization even if the
                End-User has previously authorized the Client.</t>
          </list></t>
          <t>The Authorization Server MUST NOT request End-User authorization in the
          following cases:
          <list style="symbols">
                <t>The Authorization Request contains the <spanx 
                style="verb">"prompt"</spanx> parameter with the value
		<spanx style="verb">none</spanx>.
                The Authorization Server MUST return an error if the End-User has
                not pre-authorized the Client.</t>
          </list></t>
        </section>

        <section title="Authorization Server Sends End-User Back to Client"
		 anchor="art_res">

          <t>Once the authorization is determined, the Authorization Server
          returns a successful or error response.</t>

          <section anchor="art_res_ok" title="End-User Grants Authorization">
            <t>If the Resource Owner grants the access request, the
            Authorization Server issues an Authorization Response 
            as described in
	    Section 2.1.3 of <xref target="OpenID.Messages">OpenID Connect Messages 1.0</xref> 
            to the Client by adding the response parameters to <spanx
            style="verb">redirect_uri</spanx> specified in the Authorization
            Request using the "application/x-www-form-urlencoded" format.</t>

            <t>
              Note that if the <spanx style="verb">response_type</spanx> parameter in the 
              Authorization Request includes the string value 
              <spanx style="verb">token</spanx> or <spanx style="verb">id_token</spanx>, 
              all response parameters SHOULD be added to the fragment 
              component of the redirection URI. Otherwise, the response parameters 
              are added to the query component of the redirection URI.
            </t>

            <t>
              The following are non-normative examples of requests with 
              differing <spanx style="verb">response_type</spanx> values and their responses 
              (with line wraps for display purposes only):
            </t>


            <figure>
              <preamble>Case 1: response_type=code</preamble>
             
              <artwork><![CDATA[https://server.example.com/op/authorize?
response_type=code
&client_id=s6BhdRkqt3
&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb
&scope=openid
&nonce=n-0S6_WzA2Mj
&state=af0ifjsldkj

              
HTTP/1.1 302 Found
Location: https://client.example.org/cb?
code=Qcb0Orv1zh30vL1MPRsbm-diHiMwcLyZvn1arpZv-Jxf_11jnpEX3Tgfvk
&state=af0ifjsldkj]]></artwork>
            </figure>

            <figure>
              <preamble>Case 2: response_type=token id_token</preamble>
              <artwork><![CDATA[https://server.example.com/op/authorize?
response_type=token%20id_token
&client_id=s6BhdRkqt3
&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb
&scope=openid
&nonce=n-0S6_WzA2Mj
&state=af0ifjsldkj

              
HTTP/1.1 302 Found
Location: https://client.example.org/cb#
access_token=jHkWEdUXMU1BwAsC4vtUsZwnNvTIxEl0z9K3vx5KF0Y
&token_type=Bearer
&id_token=eyJhbGciOiJSUzI1NiJ9.ew0KICAgICJpc3MiOiAiaHR0cDovL3Nlc
nZlci5leGFtcGxlLmNvbSIsDQogICAgInVzZXJfaWQiOiAiMjQ4Mjg5NzYxMDAxI
iwNCiAgICAiYXVkIjogInM2QmhkUmtxdDMiLA0KICAgICJub25jZSI6ICJuLTBTN
l9XekEyTWoiLA0KICAgICJleHAiOiAxMzExMjgxOTcwLA0KICAgICJpYXQiOiAxM
zExMjgwOTcwLA0KICAgICJhdF9oYXNoIjogIjc3UW1VUHRqUGZ6V3RGMkFucEs5U
ldwWHJXbHJlY2RiTFV5SkRJYjdTNlEiDQp9.ZP0kFjn7ZOYwga5dbfvvYLlu7DAa
RRhgE7u88OEfRqmfWCB35mwSso1A255fbvdOPryGda3xy0t2P1gjNxc2cKA8T9Rm
w0ae6UyLSaA9zROXfpdyRX6wEs_RMdnftBY60B_DCeFJkWQxUG6taXomiVH7Ozyk
765VX3gRzSoxaJKbD1xo582s0dGmMvkUL4dg7-46eOrOLkQTujUAOnjqCfiqzL1C
rchYsNZjwNBE8pySRhJTmedm882k0NRZPU1QMLJIVpB9e0Hiuwz1htHm3-XxZ63b
bzRLG6jsWknphWIFraFrf59Kgmct7jfzBF5IOvfpcdFe9kHVkKX_acts-w

Verifying and decoding the ID Token will yield the following 
ID Token JSON object:

{
  "iss": "http://server.example.com",
  "sub": "248289761001",
  "aud": "s6BhdRkqt3",
  "nonce": "n-0S6_WzA2Mj",
  "exp": 1311281970,
  "iat": 1311280970,
  "at_hash": "MTIzNDU2Nzg5MDEyMzQ1Ng"
}

]]></artwork>
            </figure>

            <figure>
              <preamble>Case 3: response_type=code id_token</preamble>
              <artwork><![CDATA[https://server.example.com/op/authorize?
response_type=code%20id_token
&client_id=s6BhdRkqt3
&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb
&scope=openid
&nonce=n-0S6_WzA2Mj
&state=af0ifjsldkj

              
HTTP/1.1 302 Found
Location: https://client.example.org/cb#
code=Qcb0Orv1zh30vL1MPRsbm-diHiMwcLyZvn1arpZv-Jxf_11jnpEX3Tgfvk
&id_token=eyJhbGciOiJSUzI1NiJ9.ew0KICAgICJpc3MiOiAiaHR0cDovL3Nlc
nZlci5leGFtcGxlLmNvbSIsDQogICAgInVzZXJfaWQiOiAiMjQ4Mjg5NzYxMDAxI
iwNCiAgICAiYXVkIjogInM2QmhkUmtxdDMiLA0KICAgICJub25jZSI6ICJuLTBTN
l9XekEyTWoiLA0KICAgICJleHAiOiAxMzExMjgxOTcwLA0KICAgICJpYXQiOiAxM
zExMjgwOTcwLA0KICAgICJjX2hhc2giOiAiTERrdEtkb1FhazNQazBjblh4Q2x0Q
mdfckNfM1RLVWI5T0xrNWZLTzl1QSINCn0.D6JxCgpOwlyuK7DPRu5hFOIJRSRDT
B7TQNRbOw9Vg9WroDi_XNzaqXCFSDH_YqcE-CBhoxD-Iq4eQL4E2jIjil47u7i68
Nheev7d8AJk4wfRimgpDhQX5K8YyGDWrTs7bhsMTPAPVa9bLIBndDZ2mEdmPcmR9
mXcwJI3IGF9JOaStYXJXMYWUMCmQARZEKG9JxIYPZNhFsqKe4TYQEmrq2s_HHQwk
XCGAmLBdptHY-Zx277qtidojQQFXzbD2Ak1ONT5sFjy3yxPnE87pNVtOEST5GJac
O1O88gmvmjNayu1-f5mr5Uc70QC6DjlKem3cUN5kudAQ4sLvFkUr8gkIQ

Verifying and decoding the ID Token will yield the following 
ID Token JSON object:

{
  "iss": "http://server.example.com",
  "sub": "248289761001",
  "aud": "s6BhdRkqt3",
  "nonce": "n-0S6_WzA2Mj",
  "exp": 1311281970,
  "iat": 1311280970,
  "c_hash": "LDktKdoQak3Pk0cnXxCltBg_rC_3TKUb9OLk5fKO9uA"
}

]]></artwork>
            </figure>

            <figure>
              <preamble>Case 4: response_type=token code</preamble>
              <artwork><![CDATA[https://server.example.com/op/authorize?
response_type=token%20code
&client_id=s6BhdRkqt3
&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb
&scope=openid
&nonce=n-0S6_WzA2Mj
&state=af0ifjsldkj


HTTP/1.1 302 Found
Location: https://client.example.org/cb#
code=Qcb0Orv1zh30vL1MPRsbm-diHiMwcLyZvn1arpZv-Jxf_11jnpEX3Tgfvk
&access_token=jHkWEdUXMU1BwAsC4vtUsZwnNvTIxEl0z9K3vx5KF0Y
&token_type=Bearer
&state=af0ifjsldkj]]></artwork>
            </figure>

            <figure>
              <preamble>Case 5: response_type=token code id_token</preamble>
              <artwork><![CDATA[https://server.example.com/op/authorize?
response_type=token%20code%20id_token
&client_id=s6BhdRkqt3
&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb
&scope=openid
&nonce=n-0S6_WzA2Mj
&state=af0ifjsldkj


HTTP/1.1 302 Found
Location: https://client.example.org/cb#
code=Qcb0Orv1zh30vL1MPRsbm-diHiMwcLyZvn1arpZv-Jxf_11jnpEX3Tgfvk
&access_token=jHkWEdUXMU1BwAsC4vtUsZwnNvTIxEl0z9K3vx5KF0Y
&token_type=Bearer
&id_token=eyJhbGciOiJSUzI1NiJ9.ew0KICAgICJpc3MiOiAiaHR0cDovL3Nlc
nZlci5leGFtcGxlLmNvbSIsDQogICAgInVzZXJfaWQiOiAiMjQ4Mjg5NzYxMDAxI
iwNCiAgICAiYXVkIjogInM2QmhkUmtxdDMiLA0KICAgICJub25jZSI6ICJuLTBTN
l9XekEyTWoiLA0KICAgICJleHAiOiAxMzExMjgxOTcwLA0KICAgICJpYXQiOiAxM
zExMjgwOTcwLA0KICAgICJhdF9oYXNoIjogIjc3UW1VUHRqUGZ6V3RGMkFucEs5U
ldwWHJXbHJlY2RiTFV5SkRJYjdTNlEiDQogICAgImNfaGFzaCI6ICJMRGt0S2RvU
WFrM1BrMGNuWHhDbHRCZ19yQ18zVEtVYjlPTGs1ZktPOXVBIg0KfQ.Jw-8W1LKps
Go17BltEpLlq1AMhSw3IRBeZrS-P3cXrDebBn09G4DWnjhD2PPze_M3ldkqng3Xk
0me_xWlg3VoJlveJ64lQ2oPe_8_0rT1sLM6UOy8-gPtwifxUfvrkpNX9KwqTju6W
MfSlDWWxW8Y8GQBMWsG7xqjYANIr84bpQ-5KyHnDdYSEDf9Si7xa3uYsJVrv1M1o
jF2tz_sNirH8aCmU1KpJ6nXPLw2uEo5slKp-b0-1AWoBcl0PSJpDJJCdTaXF_e_g
Ovd5ko9ymTZ336ZQj630QjtGZ9E4b9C_HOnI15zXQ5mh6cb2VO2r5ckDtqBy0UL-
QklkW8BfO9qg
&state=af0ifjsldkj

Verifying and decoding the ID Token will yield the following 
ID Token JSON object:

{
  "iss": "http://server.example.com",
  "sub": "248289761001",
  "aud": "s6BhdRkqt3",
  "nonce": "n-0S6_WzA2Mj",
  "exp": 1311281970,
  "iat": 1311280970,
  "at_hash": "77QmUPtjPfzWtF2AnpK9RWpXrWlrecdbLUyJDIb7S6Q",
  "c_hash": "LDktKdoQak3Pk0cnXxCltBg_rC_3TKUb9OLk5fKO9uA"
}
  
]]></artwork>
            </figure>
            
            <t>
This following example makes a request with an OpenID Request Object 
containing custom ID Token return Claims. The sample OpenID Request Object is 
described in the <xref target="req_param_method">Request Parameter Section</xref>
            </t>

            <figure>
              <preamble>Case 6: response_type=code id_token</preamble>
              <artwork><![CDATA[
https://server.example.com/op/authorize?
response_type=code%20id_token
&client_id=s6BhdRkqt3
&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb
&scope=openid
&request=eyJhbGciOiJSUzI1NiJ9.ew0KICAicmVzcG9uc2VfdHlwZSI6ICJjb2
RlIGlkX3Rva2VuIiwNCiAgImNsaWVudF9pZCI6ICJzNkJoZFJrcXQzIiwNCiAgIn
JlZGlyZWN0X3VyaSI6ICJodHRwczovL2NsaWVudC5leGFtcGxlLm9yZy9jYiIsDQ
ogICJzY29wZSI6ICJvcGVuaWQgcHJvZmlsZSIsDQogICJzdGF0ZSI6ICJhZjBpZm
pzbGRraiIsDQogICJub25jZSI6ICJuLTBTNl9XekEyTWoiLA0KICAidXNlcmluZm
8iOiANCiAgICB7DQogICAgICAiY2xhaW1zIjogDQogICAgICAgIHsNCiAgICAgIC
AgICAibmFtZSI6IHsiZXNzZW50aWFsIjogdHJ1ZX0sDQogICAgICAgICAgIm5pY2
tuYW1lIjogbnVsbCwNCiAgICAgICAgICAiZW1haWwiOiB7ImVzc2VudGlhbCI6IH
RydWV9LA0KICAgICAgICAgICJlbWFpbF92ZXJpZmllZCI6IHsiZXNzZW50aWFsIj
ogdHJ1ZX0sDQogICAgICAgICAgInBpY3R1cmUiOiBudWxsDQogICAgICAgIH0NCi
AgICB9LA0KICAgICJpZF90b2tlbiI6IA0KICAgICAgew0KICAgICAgICAibWF4X2
FnZSI6IDg2NDAwLA0KICAgICAgICAiY2xhaW1zIjogDQogICAgICAgICAgew0KIC
AgICAgICAgICAgImdlbmRlciI6IG51bGwsDQogICAgICAgICAgICAiYmlydGhkYX
RlIjogeyJlc3NlbnRpYWwiOiB0cnVlfSwNCiAgICAgICAgICAgICJhY3IiOiB7In
ZhbHVlcyI6IFsiMiJdfQ0KICAgICAgICAgIH0NCiAgICAgIH0NCn0.QO_PD7FOnO
aDULViVR-a4RmgyZA-wz1p4aKiD8ucktrF2o62PmntJC6vR1Ne_rWXZaybM4ZFN_
HzFmakwYMqrp-HBfcegj5-ifvwSOAo-EfQrr88Jd40rrnH-KdkjQQiu5BiE513o4
XK-1p7lG8RmbQc3EJwJTimNC4Eijk1wp2D99IndyH9CrOp_M5X15iQjGGF65IWb-
9ly1waEiJMFrO2BuDTKpImcjKe9odgtWRyZWs8KhfVwLVkrazhf8E08TEqK8Vuoh
g8FoCLLaw66IN4EVBMcEnncNyHId77ZeVOB-KGHJdIo75W7pc68GUc5dg1NXpBF2
UqtHmoXVGisQ
&nonce=n-0S6_WzA2Mj
&state=af0ifjsldkj


HTTP/1.1 302 Found
Location: https://client.example.org/cb#
code=Qcb0Orv1zh30vL1MPRsbm-diHiMwcLyZvn1arpZv-Jxf_11jnpEX3Tgfvk
&token_type=Bearer
&id_token=eyJhbGciOiJSUzI1NiJ9.ew0KICAgICJpc3MiOiAiaHR0cDovL3Nlc
nZlci5leGFtcGxlLmNvbSIsDQogICAgInVzZXJfaWQiOiAiMjQ4Mjg5NzYxMDAxI
iwNCiAgICAiYXVkIjogInM2QmhkUmtxdDMiLA0KICAgICJub25jZSI6ICJuLTBTN
l9XekEyTWoiLA0KICAgICJleHAiOiAxMzExMjgxOTcwLA0KICAgICJpYXQiOiAxM
zExMjgwOTcwLA0KICAgICJnZW5kZXIiOiAiZmVtYWxlIiwNCiAgICAiYmlydGhkY
XRlIjogIjE5ODctMDEtMDEiLA0KICAgICJhY3IiOiAiMiIsDQogICAgImNfaGFza
CI6ICJMRGt0S2RvUWFrM1BrMGNuWHhDbHRCZ19yQ18zVEtVYjlPTGs1ZktPOXVBI
g0KfQ.zMHXQpGOkWyzZexs490gN4bx16lzSJcL_F_hRq1afrtwgEUX4X976wHv6T
WmoYBEsO14DLxNqsuMi-FCISbzCbOOQwyh9OjbojZlHuwc9lZhRUREiBTT00vIYF
AT7g4caDuSlWvUZL-K0pCpAtSdqFF7TeOmv1UFcGXSXrw6g9v-WjY6WlkDF8pl37
ubHIGNnOJnxwq-zOTic1KTpqRHWnLdrEoaEA4eIMTotBg7HfcoooeCqMVdrDVvwu
1hFLxpWtztRiAynT4M8Q4BZeMlFyyFV0sf3nu8ShB7617CtJHSSPryfrm1IvLpFC
28V9c5LcaVekf9sQLcDUmdfxJ4DA
&state=af0ifjsldkj

Verifying and decoding the ID Token will yield the following 
ID Token JSON object:

{
  "iss": "http://server.example.com",
  "sub": "248289761001",
  "aud": "s6BhdRkqt3",
  "nonce": "n-0S6_WzA2Mj",
  "exp": 1311281970,
  "iat": 1311280970,
  "gender": "female",
  "birthdate": "1987-01-01",
  "acr": "2",
  "c_hash": "LDktKdoQak3Pk0cnXxCltBg_rC_3TKUb9OLk5fKO9uA"
}  
]]></artwork>
            </figure>
                        

            <figure>
              <preamble>Public Key Information used to verify the ID Token</preamble>
              <artwork><![CDATA[The following is the RSA public key information that can be used
to verify the ID Token signatures in the above examples.
The values are an array of hexadecimal digits in big endian format.
                
modulus: 
[
 ce,11,16,4c,12,55,4d,f7,14,7a,a9,cc,cc,e4,05,30,
 21,15,41,63,b2,39,46,70,3f,c2,eb,05,68,7c,f2,d2,
 ab,67,23,c6,0a,f0,64,4c,3a,7e,13,60,73,c8,73,10,
 57,8a,4a,e7,55,32,b3,66,0e,c3,32,fd,b1,ee,53,1c,
 35,8c,75,af,6b,b6,c0,89,55,c8,f5,57,b5,9a,13,bc,
 0f,82,5f,a4,20,87,56,59,fe,28,da,0e,99,b3,33,b2,
 fc,5a,78,ab,49,c6,dc,e4,ed,0d,10,a4,06,ed,a2,10,
 fd,b5,8f,cd,a9,45,24,6b,90,20,71,9f,36,82,85,f9,
 40,ec,a6,5b,23,59,ff,ca,12,ad,c7,20,3b,15,d0,38,
 f3,42,da,49,56,72,28,0a,6f,ac,a8,98,86,87,00,09,
 2c,1f,d3,2e,82,43,ec,24,12,2e,a6,55,74,49,b7,56,
 81,4b,2c,25,2d,80,34,f2,88,e9,e6,19,19,43,7f,5e,
 08,cd,a4,d4,47,57,76,16,da,af,df,7c,43,d3,d9,4f,
 05,c0,d5,c7,ef,b8,64,d9,6c,35,b1,10,a2,e3,30,a5,
 6e,2a,b4,f5,62,fb,3e,d8,d4,d7,85,90,16,d4,a8,c5,
 4b,fd,d4,c0,b9,03,93,ec,38,75,53,7e,c7,9b,43,9f
]

exponent: [01,00,01]]]></artwork>
            </figure>            

          </section>

          <section anchor="authz_error"
                   title="End-User Denies Authorization or Invalid Request">
            <t>If the End-User denies the authorization or the user authentication
            fails, the Authorization Server MUST return the error authorization 
            response as defined in
	    Section 2.1.4 of <xref target="OpenID.Messages">OpenID Connect Messages 1.0</xref>.
	    The Authorization Server returns the Client to
            the redirection URI specified in the Authorization Request
            with the appropriate error parameters. No
            other parameters SHOULD be returned.</t>

            <t>The error response parameters are the following:
              <list style="hanging">
                <t hangText="error">REQUIRED. Error code.</t>

                <t hangText="error_description">OPTIONAL. Human-readable ASCII
                encoded text description of the error.</t>

                <t hangText="error_uri">OPTIONAL. URI of a web page that
                includes additional information about the error.</t>

                <t hangText="state">
		  OAuth 2.0 state value.
		  REQUIRED if the Authorization Request
                included the <spanx style="verb">state</spanx> parameter. Set
                to the exact value received from the Client.</t>
              </list></t>

            <t>If the <spanx style="verb">response_type</spanx> parameter in the
            Authorization Request includes the string value
	    <spanx style="verb">token</spanx> or <spanx style="verb">id_token</spanx>,
	    all error response parameters SHOULD be added to the 
            fragment component of the redirection URI. Otherwise, the response
            parameters are added to the query component of the redirection URI.
            </t>

            <t><figure>
                <preamble>The following is a non-normative example
		(with line wraps after the second line for the display purposes only):</preamble>

                <artwork><![CDATA[HTTP/1.1 302 Found
Location: https://client.example.org/cb?
error=invalid_request
&error_description=the%20request%20is%20not%20valid%20or%20malformed
&state=af0ifjsldkj]]></artwork>
              </figure></t>
          </section>
        </section>
      </section>
    </section>

    <section anchor="token_ep" title="Token Endpoint">
      <t>The Token Endpoint handles requests for retrieving and refreshing
      Access Tokens as well as ID Token and other variables.</t>

      <t>Clients MUST use the HTTP "POST" method to make requests to the Token
      Endpoint. Request parameters are added using
      <xref target="form_serialization">form serialization</xref>.</t>

      <t>Clients MAY provide authentication parameters in the request to the
      Token Endpoint as described in
      Section 2.2.1 of <xref target="OpenID.Messages">OpenID Connect Messages 1.0</xref>.</t>

      <t>Authorization Servers MUST support the use of the HTTP "POST"
      method defined in <xref target="RFC2616">RFC 2616</xref> at the
      Token Endpoint.</t>

      <t>Authorization Servers MUST require the use of a transport-layer
      security mechanism. The Authorization Server MUST support TLS 1.2
      <xref target="RFC5246">RFC 5246</xref> and/or TLS 1.0
      <xref target='RFC2246' /> and MAY support
      other transport-layer mechanisms with equivalent security.</t>

      <t>All Token Endpoint responses that contain tokens, secrets, or other
      sensitive information MUST include the following HTTP response header
      fields and values:</t>

      <texttable title="HTTP Response Headers and Values">
        <ttcol>Header Name</ttcol>

        <ttcol>Header Value</ttcol>

        <c>Cache-Control</c>

        <c>no-store</c>

        <c>Pragma</c>

        <c>no-cache</c>
      </texttable>

      <section anchor="RequestingAccessToken" title="Requesting Access Token">
        <t>To retrieve an Access Token, a Client MUST have an Authorization
        Code obtained via the method as described in <xref
        target="code_flow">Authorization Code Flow</xref>.</t>

        <section anchor="AccessTokenRequest" title="Access Token Request">
          <t>To obtain an Access Token, Refresh Token or ID Token, the Client MUST
          authenticate to the Token Endpoint using the authentication method
	  registered for its <spanx style="verb">client_id</spanx>, as documented in
	  Section 2.2.1 of <xref target="OpenID.Messages">OpenID Connect Messages 1.0</xref>.
          The Client sends the parameters via HTTPS POST to the Token Endpoint using
          <xref target="form_serialization">form serialization</xref> as 
          specified in Section 4.1.3 of 
          <xref target="RFC6749">OAuth 2.0</xref>.</t>

          <figure>
            <preamble>The following is a non-normative example of an Access Token request:</preamble>

            <artwork><![CDATA[POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW

grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb]]></artwork>
          </figure>
          <t>
            The Authorization Server MUST:
          </t>
          <t>
            <list style='symbols'>
              <t>
                Require client authentication for any Client issued
                client credentials (or with other authentication requirements),
              </t>
              <t>
                Authenticate the Client if client authentication is included and ensure the
                Authorization Code was issued to the authenticated Client,
              </t>
              <t>
                Verify that the Authorization Code is valid, and
              </t>
              <t>
                Ensure that, if <spanx style='verb'>redirect_uri</spanx> parameter is
		present (which it should be), that the
		Scheme, Host, Path, and Query Parameter segments
		are identical to the <spanx style='verb'>redirect_uri</spanx>
		parameter value that was included in the initial Authorization Request
		(which also should have been present).
		Should the <spanx style='verb'>redirect_uri</spanx> parameter value
		not be present when there is only one registered
		<spanx style='verb'>redirect_uri</spanx> value,
		the Authorization Server MAY return an error
		(since the client should have included the parameter)
		or MAY proceed without an error
		(since OAuth 2.0 permits the parameter to be omitted in this case).
              </t>
            </list>
          </t>
        </section>

        <section anchor="AccessTokenResponse" title="Access Token Response">
          <t>Upon receipt of the Token Request, the Authorization Server MUST
          return either a successful response or an error response that corresponds to
          the received Authorization Code.</t>

	  <t>A successful response returns the "<spanx style="verb">application/json</spanx>"
	  media type and the response body is the Access Token Response documented in
	  Section 2.2.3 of <xref target="OpenID.Messages">OpenID Connect Messages 1.0</xref>.</t>


	  <figure>
	    <preamble>Following is a non-normative example of a
	    successful response:</preamble>

	    <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store
Pragma: no-cache

{
 "access_token": "SlAV32hkKG",
 "token_type": "Bearer",
 "refresh_token": "8xLOxBtZp8",
 "expires_in": 3600,
 "id_token": "eyJhbGciOiJSUzI1NiJ9.ew0KICAgICJpc3MiOiAiaHR0cDovL
3NlcnZlci5leGFtcGxlLmNvbSIsDQogICAgInVzZXJfaWQiOiAiMjQ4Mjg5NzYxM
DAxIiwNCiAgICAiYXVkIjogInM2QmhkUmtxdDMiLA0KICAgICJub25jZSI6ICJuL
TBTNl9XekEyTWoiLA0KICAgICJleHAiOiAxMzExMjgxOTcwLA0KICAgICJpYXQiO
iAxMzExMjgwOTcwDQp9.lsQI_KNHpl58YY24G9tUHXr3Yp7OKYnEaVpRL0KI4szT
D6GXpZcgxIpkOCcajyDiIv62R9rBWASV191Akk1BM36gUMm8H5s8xyxNdRfBViCa
xTqHA7X_vV3U-tSWl6McR5qaSJaNQBpg1oGPjZdPG7zWCG-yEJC4-Fbx2FPOS7-h
5V0k33O5Okd-OoDUKoFPMd6ur5cIwsNyBazcsHdFHqWlCby5nl_HZdW-PHq0gjzy
JydB5eYIvOfOHYBRVML9fKwdOLM2xVxJsPwvy3BqlVKc593p2WwItIg52ILWrc6A
tqkqHxKsAXLVyAoVInYkl_NDBkCqYe2KgNJFzfEC8g"
}]]></artwork>
	  </figure>
	</section>

	<section anchor="AccessTokenErrorResponse" title="Access Token Error Response">
	  <t>If the Token Request is invalid or unauthorized, the
	  Authorization Server constructs the response by returning the
	  Token Error Response defined in <xref
	  target="OpenID.Messages">OpenID Connect Messages 1.0</xref> in the
	  entity body of the HTTP response using the <spanx style="verb">application/json</spanx>
	  media type with HTTP response code 400.</t>

	  <figure>
	    <preamble>Following is a non-normative example:</preamble>

	    <artwork><![CDATA[HTTP/1.1 400 Bad Request
Content-Type: application/json
Cache-Control: no-store
Pragma: no-cache

{
 "error": "invalid_request"
}]]></artwork>
	  </figure>
        </section>
      </section>

      <section anchor="RefreshingAccessToken" title="Refreshing Access Token">
         <t>To refresh an Access Token, the Client MUST
          authenticate to the Token Endpoint using the authentication method registered
	  for its <spanx style="verb">client_id</spanx>, as documented in
	  Section 2.2.1 of <xref target="OpenID.Messages">OpenID Connect Messages 1.0</xref>.
	  The Client sends the parameters via HTTPS POST to the Token Endpoint using
          <xref target="form_serialization">form serialization</xref> as 
          specified in Section 6 of 
          <xref target="RFC6749">OAuth 2.0</xref>:</t>
        
        <t>The Authorization Server MUST validate the Refresh
          Token.
        </t>

        <section anchor="RefreshTokenResponse" title="Refresh Token Response">
          <t>Upon receipt of the Refresh Token Request, the Authorization Server MUST
          return either a successful response or an error response that corresponds to
          the received Refresh Token.</t>

          <t>Upon successful validation of the Refresh Token, a successful
          response returns the "<spanx style="verb">application/json</spanx>"
          media type and the response body is the Access Token Response of 
          Section 2.2.3 of <xref target="OpenID.Messages">OpenID Connect Messages 1.0</xref>
	  except that it MUST NOT return an <spanx style="verb">id_token</spanx>.</t>
        
          <figure>
            <preamble>Following is a non-normative example of a Refresh
            Token request and response:</preamble>

            <artwork><![CDATA[POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

client_id=s6BhdRkqt3
&client_secret=some_secret12345
&grant_type=refresh_token
&refresh_token=8xLOxBtZp8
&scope=openid%20profile


HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store
Pragma: no-cache

{
 "access_token": "TlBN45jURg",
 "token_type": "Bearer",
 "refresh_token": "9yNOxJtZa5",
 "expires_in": 3600
}]]></artwork>
          </figure>
        </section>

	<section anchor="RefreshTokenErrorResponse" title="Refresh Token Error Response">
	  <t>If the Refresh Token Request is invalid or unauthorized, the
	  Authorization Server returns the 
	  Token Error Response as defined in Section 5.2 of <xref
	  target="RFC6749">OAuth 2.0</xref>.</t>
	</section>
      </section>
    </section>

    <section anchor="userinfo_ep" title="UserInfo Endpoint">
      <t>To obtain the requested Claims about the End-User, the Client
      makes a GET or POST request to the UserInfo Endpoint as in <xref
      target="OpenID.Messages">OpenID Connect Messages 1.0</xref>.</t>

      <t>Authorization Servers MUST require the use of a transport-layer
      security mechanism. The Authorization Server MUST support TLS 1.2
      <xref target="RFC5246">RFC 5246</xref> and/or TLS 1.0
      <xref target='RFC2246' /> and MAY support
      other transport-layer mechanisms with equivalent security.</t>

      <t>Authorization Servers MUST support the use of the HTTP "GET" and HTTP
      "POST" methods defined in <xref target="RFC2616">RFC 2616</xref> at the
      UserInfo Endpoint. </t>

      <t>Authorization Servers MUST accept Access Tokens as
      <xref target="RFC6750">OAuth 2.0 Bearer Token Usage</xref>.</t>
      
      <t>Authorization Servers SHOULD support the use of 
      <xref target="CORS">Cross Origin Resource Sharing (CORS)</xref> and
      or other methods as appropriate to enable Java Script Clients to access the endpoint.</t>

      <section anchor="UserInfoRequest" title="UserInfo Request">
        <t>Client SHOULD send the UserInfo Request defined in
	Section 2.3.1 of <xref target="OpenID.Messages">OpenID Connect Messages 1.0</xref>
        either in HTTP GET or POST request.</t>
        
        <t>The Access Token obtained
            from an OpenID Connect Authorization Request MUST be sent as a Bearer Token.
            Section 2 of the <xref target="RFC6750">OAuth 2.0 Bearer Token Usage</xref>
            specification documents the permissible methods of sending the Access Token.</t> 
            <t>It is RECOMMENDED that the Client use the authorization header method for all 
            requests using GET.</t>
            
            
        <figure>
          <preamble>The following is a non-normative example:</preamble>

          <artwork><![CDATA[GET /userinfo?schema=openid HTTP/1.1
Host: server.example.com
Authorization: Bearer eyJhbGciOiJSUzI1NiJ9.eyJ ... fQ.8Gj_-sj ... _X]]></artwork>
        </figure>
      </section>

      <section anchor="UserInfoResponse" title="UserInfo Response">
        <t>The <spanx style="verb">sub</spanx> (subject) Claim in the UserInfo Endpoint response MUST exactly match the 
        <spanx style="verb">sub</spanx> Claim in the ID Token, before using additional UserInfo Endpoint Claims.</t>
        
        <t>Upon receipt of the UserInfo request, the UserInfo Endpoint MUST
        return the JSON Serialization of the UserInfo response as in <xref
        target="OpenID.Messages">OpenID Messages 1.0</xref> in the HTTP response
        body. The content-type of the HTTP response MUST be set to <spanx
        style="verb">application/json</spanx> if the response body is a text
        JSON structure;
	the response body SHOULD be encoded using UTF-8.
	If the JSON response is
        signed or encrypted, then the
        content-type MUST be set to <spanx style="verb">application/jwt</spanx>.</t>

        <t>Upon receipt of the UserInfo Response, the Client MUST verify 
        the response in accordance with
	Section 5.3 (UserInfo Response Validation) of <xref target="OpenID.Messages">OpenID Connect Messages 1.0</xref>.
        </t>

        <figure>
          <preamble>Following is a non-normative example of such
          response:</preamble>

          <artwork><![CDATA[HTTP/1.1 200 OK
Content-Type: application/json

{
 "sub": "248289761001",
 "name": "Jane Doe"
 "given_name": "Jane",
 "family_name": "Doe",
 "email": "janedoe@example.com",
 "picture": "http://example.com/janedoe/me.jpg"
}]]></artwork>
        </figure>
      </section>

      <section anchor="UserInfoErrorResponse" title="UserInfo Error Response">
  <t>When an error condition occurs, the UserInfo Endpoint returns
  an Error Response as defined in Section 3 of
  the <xref target="RFC6750">OAuth 2.0 Bearer Token Usage</xref> specification
  utilizing an error code as specified in
  Section 2.3.3 of <xref target="OpenID.Messages">OpenID Connect Messages 1.0</xref>.</t>

  <t>The HTTP 400 (Bad Request) status code SHOULD be returned for the 
    <xref target="RFC6750">OAuth 2.0 Bearer Token Usage</xref> response
    when the <spanx style="verb">invalid_schema</spanx> error occurs.</t>

  <figure>
      <preamble>Following is a non-normative example of an error
      response:</preamble>

      <artwork><![CDATA[HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example.com",
                     error="invalid_token",
                     error_description="The access token expired"]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="self_issued" title="Self-Issued OpenID Provider">
      <t>There is a special issuer "https://self-issued.me" that indicates
      a user is using a personal OP that issues self-signed ID Tokens.</t>

      <section anchor="self_issued.discovery" title="Self-Issued OpenID Provider Discovery">
        <t>
          If the input identifier contains the domain self-issued.me, dynamic discovery is not performed. 
          The following static configuration values are used.
        </t>
        <t>
          <figure>
            <artwork><![CDATA[{
 "authorization_endpoint":
   "openid:",
 "issuer":
   "https://self-issued.me",
 "scopes_supported":
   ["openid", "profile", "email", "address", "phone"],
 "response_types_supported":
   ["id_token"],
 "subject_types_supported":
   ["pairwise"],
 "id_token_signing_alg_values_supported":
   ["RS256"],
 "request_object_signing_alg_values_supported":
   ["none", "RS256"]
 }]]>
            </artwork>
          </figure>
        </t>
        <t>Note: The OpenID Foundation may consider hosting a site https://self-issued.me/ 
          that returns the above static configuration file so that the client would not 
          need any special treatment for discovery of the self-issued OP. 
        </t>
      </section>

      <section anchor="self_issued.registration" title="Client Registration to Self-Issued OpenID Provider">
        <t>
          When using a self-issued OP, the Client is deemed to have 
          registered with the OP and obtained following Client Registration Response.  
        </t>
        <t><list style="hanging">
          <t hangText="client_id">
            <spanx style="verb">redirect_uri</spanx> of the Client. 
          </t>
          <t hangText="expires_at">
            0.
          </t>
        </list></t>
        <t>Note: The OpenID Foundation may consider hosting the (stateless) endpoint
          <spanx style="verb">https://self-issued.me/registration/1.0/</spanx> 
          that returns the response above so that the Client would not need to 
          perform any special processing for registration of a self-issued OP.
        </t>
      </section>

      <section anchor="self_issued.request" title="Self-Issued OpenID Provider Request">
        <t>The Client sends the Authorization Request to the Authorization
           Endpoint with the following REQUIRED parameters. </t>
        <t><list style="hanging">
          <t hangText="response_type">
            REQUIRED. Constant string value <spanx style="verb">id_token</spanx>.
          </t>
          <t hangText="client_id">
            REQUIRED. <spanx style="verb">redirect_uri</spanx> 
            of the client. Note that since it is same as the 
            <spanx style="verb">redirect_uri</spanx>, <spanx style="verb">redirect_uri</spanx> 
            is not required to be sent in the request. 
          </t>
          <t hangText="scope">
            REQUIRED. <spanx style="verb">scope</spanx> parameter value,
            as defined in <xref target="scopes"/>.
          </t>
          <t hangText="policy_url">
            REQUIRED. URL of a page that the Client provides to the 
            End-User to read describing the how the attributes received will be used. 
            The OP SHOULD display this URL to the End-User. 
            Unlike the standard OP case, a self-issued OP cannot receive this 
            value at the registration time, so it has to be provided 
            as a part of the authorization request. 
          </t>
          <t hangText="request">OPTIONAL.
	      OpenID Request Object value, as defined in
	      Section 2.1.1.1 of <xref target="OpenID.Messages">OpenID Connect Messages 1.0</xref>. 
	      The OpenID Request Object may be
	      encrypted in a JWE by the client.  The <spanx style="verb">sub</spanx> (subject)
	      of the ID Token
	      MUST be sent as the <spanx style="verb">kid</spanx> (Key ID) of the JWE. </t>

           <t hangText="id_token_hint">OPTIONAL.
	     ID Token
              passed to the Authorization Server as a hint about the user's current or past
              authenticated session with the Client. This SHOULD be present if 
              <spanx style="verb">prompt=none</spanx> is sent. 
              The value is a <xref target="JWS">JWS</xref> encoded 
              ID Token as signed by the Issuer,
              the <xref target="JWS">JWS</xref> may be <xref target="JWE">JWE</xref> encrypted by 
              the public key of the Issuer for
              additional confidentiality. If the ID Token
              received by the RP was encrypted, 
              the Client MUST decrypt the signed ID Token.
              The Client MAY re-encrypt 
              using the key that the server is capable of decrypting. 
	      For a self-issued ID Token, the 
	      <spanx style="verb">sub</spanx> (subject)
	      of the ID Token
	      MUST be sent as the <spanx style="verb">kid</spanx> (Key ID) of the JWE.</t>

        </list></t>
        <t>
          Other parameters MAY be sent. 
          Note that all claims are returned in the ID Token.
        </t>
        <t>The entire URL MUST NOT exceed 2048 bytes.</t>
        <figure>
          <preamble>
            Following is a non-normative example (with line wraps for display purposes only):
          </preamble>
          <artwork><![CDATA[HTTP/1.1 302 Found
Location: openid://
?response_type=id_token
&client_id=https%3A%2F%2Fclient.example.org%2Fcb
&scope=openid%20profile
&policy_url=https%3A%2F%2Fclient.example.org%2Fusage%2F
&state=af0ifjsldkj&nonce=n-0S6_WzA2Mj]]></artwork>
        </figure> 
      </section>

      <section anchor="self_issued.response" title="Self-Issued OpenID Provider Response">
        <t>The self-issued OpenID Provider response is the same as the normal implicit flow 
          response with the following refinements.  Since it is an implicit flow 
          response, the response parameters will be returned in a fragment.
        </t>
        <t><list style="numbers">
          <t>
	    The <spanx style="verb">iss</spanx> (issuer) Claim value is 
            <spanx style="verb">https://self-issued.me</spanx>.
	  </t>
	  <t>
	    A <spanx style="verb">user_jwk</spanx> Claim is present, with its value being
	    the public key value used to check the signature of the ID Token.
	  </t>
	  <t>
	    The <spanx style="verb">sub</spanx> (subject) Claim
	    value is the base64url encoded SHA-256 hash of 
            the concatenation of the key values in the
	    <spanx style="verb">user_jwk</spanx> claim.
	    When the <spanx style="verb">alg</spanx> value is
	    <spanx style="verb">RS256</spanx>, the key values
	    <spanx style="verb">mod</spanx> and 
            <spanx style="verb">exp</spanx> are concatenated in that order.
	    When the <spanx style="verb">alg</spanx> value is
	    <spanx style="verb">ES256</spanx>, the key values
	    <spanx style="verb">crv</spanx>,
	    <spanx style="verb">x</spanx> and 
            <spanx style="verb">y</spanx> are concatenated in that order.
	  </t>
	  <t>
	    No Access Token is returned for accessing a UserInfo endpoint,
	    so all claims returned must be in the ID Token.
	  </t>
	</list></t>
      </section>

      <section anchor="self_issued.validation" title="Self-Issued ID Token Validation">
        <t>To validate the ID Token in the Authorization or Token Endpoint Response, the Client
        MUST do the following:</t>

        <t><list style="numbers">
          <t>
            The Client MUST validate that the value of the <spanx style="verb">iss</spanx> (issuer) Claim is <spanx style="verb">https://self-isued.me</spanx>.  
            If <spanx style="verb">iss</spanx> contains a different value, 
            the ID Token is not self-issued, and instead 
            it MUST be validated according to
	    Section 5.2 of <xref target="OpenID.Messages">OpenID Connect Messages 1.0</xref>.
          </t>
          <t>
            The Client MUST validate that the 
            <spanx style="verb">aud</spanx> (audience) Claim
	    contains the value of the <spanx style="verb">redirect_uri</spanx>
            that the client sent in the authentication request as an audience. 
	  </t>
	  <t>
            The Client MUST validate the signature of the ID Token according to
            <xref target="JWS">JWS</xref> using the algorithm specified in the 
            <spanx style="verb">alg</spanx> parameter of the JWT header <xref target="JWT"/>,  
            using the key in the <spanx style="verb">user_jwk</spanx> claim;
	    the key is in JWK format.
          </t>
          <t>
            The <spanx style="verb">alg</spanx> value SHOULD be the default of 
            <spanx style="verb">RS256</spanx>.
	    It may also be <spanx style="verb">ES256</spanx>.
          </t>
          <t>
            The Client MUST validate that the <spanx style="verb">sub</spanx> (subject) Claim
	    value is the base64url encoded SHA-256 hash of 
            the concatenation of the key values in the
	    <spanx style="verb">user_jwk</spanx> claim.
	    When the <spanx style="verb">alg</spanx> value is
	    <spanx style="verb">RS256</spanx>, the key values
	    <spanx style="verb">mod</spanx> and 
            <spanx style="verb">exp</spanx> are concatenated in that order.
	    When the <spanx style="verb">alg</spanx> value is
	    <spanx style="verb">ES256</spanx>, the key values
	    <spanx style="verb">crv</spanx>,
	    <spanx style="verb">x</spanx> and 
            <spanx style="verb">y</spanx> are concatenated in that order.
          </t>
          <t>
            The current time MUST be less than the value of the 
            <spanx style="verb">exp</spanx> Claim
	    (possibly allowing for some small leeway to account for clock skew).
          </t>
          <t>
            The <spanx style="verb">iat</spanx> Claim can be used to reject tokens that 
            were issued too far away from the current time, limiting the amount of
            time that nonces must be stored to prevent attacks. 
            The acceptable range is Client specific.
          </t>
          <t>
            If a nonce value was sent in the Authorization Request, 
            a <spanx style="verb">nonce</spanx> Claim MUST be present 
            and its value of the checked to verify that
            it is the same value as the one that was sent in the Authorization
            Request. The Client SHOULD check the <spanx style="verb">nonce</spanx> value for replay attacks.
            The precise method for detecting replay attacks is Client specific.
          </t>
        </list></t>
        <figure>
            <preamble>The following is a non-normative example of a base64url decoded 
            self-issued ID Token
	    (with line wraps for display purposes only):</preamble>

            <artwork><![CDATA[
{
 "iss": "https://self-issued.me",
 "sub": "wBy8QvHbPzUnL0x63h13QqvUYcOur1X0cbQpPVRqX5k",
 "aud": "https://client.example.org/cb",
 "nonce": "n-0S6_WzA2Mj",
 "exp": 1311281970,
 "iat": 1311280970,
 "user_jwk": {"alg":"RSA",
        "n": "0vx7agoebGcQSuuPiLJXZptN9nndrQmbXEps2aiAFbWhM78LhWx
   4cbbfAAtVT86zwu1RK7aPFFxuhDR1L6tSoc_BJECPebWKRXjBZCiFV4n3oknjhMs
   tn64tZ_2W-5JsGY4Hc5n9yBXArwl93lqt7_RN5w6Cf0h4QyQ5v-65YGjQR0_FDW2
   QvzqY368QQMicAtaSqzs8KJZgnYb9c7d0zgdAZHzu6qMQvRL5hajrn1n91CbOpbI
   SD08qNLyrdkt-bFTWhAI4vMQFh6WeZu0fM4lFd2NcRwr3XPksINHaQ-G_xBniIqb
   w0Ls1jF44-csFCur-kEgU8awapJzKnqDKgw",
        "e":"AQAB" 
        }
}]]></artwork>
        </figure>

      </section>
    </section>

<section anchor="client_Initiate_login" title="Initiating Login at Client from Third Party">
      <t>In some cases the login flow may start at the Authorization Server or other party via a stored link.
      The target resource at the Client may also be a deep link rather than a default landing page.</t>

      <t>The client may optionally <xref
      target="OpenID.Registration">register</xref> a <spanx style="verb">initiate_login_uri</spanx> that
      can be used by the Authorization Server or other party to initiate login for a user at the Client.</t>
      
      <t>The Authorization Server or Third Party sends the Initiation Request to the Client Initiation
           Endpoint with the following parameters:</t>
        <t><list style="hanging">
          <t hangText="login_hint">REQUIRED.
	    Hint to the authorization service 
            about the login identifier the user may use to authenticate at the authorization 
              service.
          </t>
          <t hangText="iss">REQUIRED.
	    Issuer Identifier for the Issuer that the client is to send the authentication request to. 
            The value MUST be a URI using the https: scheme.
          </t>
          <t hangText="target_link_uri">OPTIONAL.
	    URI that the client is requested to redirect to after authentication.
	    Clients MUST verify the value of  the
            <spanx style="verb">target_link_uri</spanx> to prevent being used as a open redirector to external sites.
          </t>
          
        </list></t>
        
        <t>Other parameters MAY be sent, if defined by extensions.  Parameters not understood MUST be ignored by the client.</t>
        
        <t>Clients SHOULD employ frame busting and other techniques to prevent users from being logged in by third party sites without there knowledge.</t>
      
    </section>

    <section anchor="Serializations" title="Serializations">
      <t>A request message MAY be serialized using one of the following methods:
        <list style="numbers">
            <t>Query String Serialization</t>
            <t>Form Serialization</t>
        </list>
      </t>

      <section anchor="qss" title="Query String Serialization">
        <t>In order to serialize the parameters using the query string
        serialization, the Client constructs the string by adding the
        parameters and values to the query component of a URL using the <spanx
        style="verb">application/x-www-form-urlencoded</spanx> format as
        defined by <xref target="W3C.REC-html401-19991224"></xref>. Query string
        serialization is typically used in HTTP GET requests.</t>

        <figure>
          <preamble>Following is a non-normative example of such
          serialization:</preamble>

          <artwork><![CDATA[GET /authorize?scope=openid&response_type=code
&client_id=s6BhdRkqt3
&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb HTTP/1.1
Host: server.example.com]]></artwork>
        </figure>
      </section>

      <section anchor="form_serialization" title="Form Serialization">
        <t>Parameters and their values are form serialized by adding the 
        parameter names and values to the entity body of the HTTP request using
        the <spanx style="verb">application/x-www-form-urlencoded</spanx> format
        as defined by <xref target="W3C.REC-html401-19991224"></xref>. Form
        serialization is typically used in HTTP POST requests.</t>

        <figure>
          <preamble>Following is a non-normative example of such
          serialization:</preamble>

          <artwork><![CDATA[POST /authorize HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

scope=openid&response_type=code
&client_id=s6BhdRkqt3
&redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="ImplementationConsiderations" title="Implementation Considerations">
      <t>
	This specification defines features used by both Relying Parties and
	OpenID Providers.  Features that are mandatory to implement for
	Relying Parties are already described in the
	<xref target="OpenID.Basic">OpenID Connect Basic Client Profile 1.0</xref> and
	<xref target="OpenID.Implicit">OpenID Connect Implicit Client Profile 1.0</xref>
	specifications, and so are not discussed again here.
      </t>
      <t>
	All OpenID Providers MUST implement the features that are already listed elsewhere
	in this specification as being "REQUIRED" or are described with a "MUST".
	Since this specification is a protocol binding for the
	<xref target="OpenID.Messages">OpenID Connect Messages 1.0</xref> specification,
	all the implementation considerations described in that specification
	also apply here.
      </t>

      <section anchor="disco_reg" title="Discovery and Registration">

	<t>Some OpenID Connect installations can use a pre-configured set of
	OpenID Providers and/or Relying Parties. In those cases, it may not be
	necessary to support dynamic discovery of information about identities
	or services or dynamic registration of Clients.</t>

	<t>However, if installations choose to support unanticipated
	interactions between Relying Parties and OpenID Providers that do not
	have pre-configured relationships, they SHOULD accomplish this by
	implementing the facilities defined in the <xref
	target="OpenID.Discovery">OpenID Connect Discovery 1.0</xref> and <xref
	target="OpenID.Registration">OpenID Connect Dynamic Client Registration
	1.0</xref> specifications.</t>
      </section>
    </section>

    <section anchor="security_considerations" title="Security Considerations">
      <t>This specification references the security considerations defined in
      <xref target="OpenID.Messages">OpenID Connect Messages 1.0</xref>.</t>

      <t>In addition, the following list of attack vectors and remedies are
      also considered.</t>

      <section anchor="ImplicitGrantFlowThreats" title="Implicit Grant Flow Threats">
        <t>In the implicit grant flow, the Access Token is returned in the
        fragment part of the Client's <spanx style="verb">redirect_uri</spanx> through HTTPS, thus it is
        protected between the OP and the User-Agent, and User-Agent and the
        RP. The only the place it can be captured is the User-Agent where the
        TLS session is terminated, and is possible if the User-Agent is
        infested by malware.</t>
      </section>
    </section>

    <section anchor="privacy_considerations" title="Privacy Considerations">
      <t>The UserInfo response typically contains Personally Identifiable
      Information. As such, End-User consent for the release of the information
      for the specified purpose SHOULD be obtained at or prior to the
      authorization time in accordance with relevant regulations. The purpose
      of use is typically registered in association with the <spanx
      style="verb">redirect_uri</spanx>.</t>

      <t>Only necessary UserInfo data should be stored at the Client and the
      Client SHOULD associate the received data with the purpose of use
      statement.</t>

      <t>The Resource Server SHOULD make the UserInfo access log available to 
      the End-User so that the End-User can monitor who accessed his data.</t>

      <t>To protect the End-User from a possible correlation among Clients, the
      use of a Pairwise Pseudonymous Identifier (PPID) as the <spanx
      style="verb">sub</spanx> SHOULD be considered.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <section anchor="oauth_params" title="OAuth Parameters Registry">

	<t>
	  This specification registers the following parameters
	  in the IANA
	  OAuth Parameters registry
	  defined in <xref target="RFC6749">RFC 6749</xref>.
	</t>

	<section anchor='ParametersContents' title='Registry Contents'>
          <t> <?rfc subcompact="yes"?>
	    <list style="symbols">
              <t>Parameter name: display</t>

              <t>Parameter usage location: Authorization Request</t>

              <t>Change controller: OpenID Foundation Artifact Binding Working Group - openid-specs-ab@lists.openid.net</t>

              <t>Specification document(s): <xref target="AuthParams"/> of this document</t>

              <t>Related information: None</t>
            </list>
	  </t>

          <t>
	    <list style="symbols">
              <t>Parameter name: prompt</t>

              <t>Parameter usage location: Authorization Request</t>

              <t>Change controller: OpenID Foundation Artifact Binding Working Group - openid-specs-ab@lists.openid.net</t>

              <t>Specification document(s): <xref target="AuthParams"/> of this document</t>

              <t>Related information: None</t>
            </list>
	  </t>

          <t>
	    <list style="symbols">
              <t>Parameter name: nonce</t>

              <t>Parameter usage location: Authorization Request</t>

              <t>Change controller: OpenID Foundation Artifact Binding Working Group - openid-specs-ab@lists.openid.net</t>

              <t>Specification document(s): <xref target="AuthParams"/> of this document</t>

              <t>Related information: None</t>
            </list>
	  </t>

          <t>
	    <list style="symbols">
              <t>Parameter name: request</t>

              <t>Parameter usage location: Authorization Request</t>

              <t>Change controller: OpenID Foundation Artifact Binding Working Group - openid-specs-ab@lists.openid.net</t>

              <t>Specification document(s): <xref target="AuthParams"/> of this document</t>

              <t>Related information: None</t>
            </list>
	  </t>

          <t>
	    <list style="symbols">
              <t>Parameter name: request_uri</t>

              <t>Parameter usage location: Authorization Request</t>

              <t>Change controller: OpenID Foundation Artifact Binding Working Group - openid-specs-ab@lists.openid.net</t>

              <t>Specification document(s): <xref target="AuthParams"/> of this document</t>

              <t>Related information: None</t>
            </list>
	  </t>

          <t>
	    <list style="symbols">
              <t>Parameter name: id_token</t>

              <t>Parameter usage location: Authorization Response, Access Token
              Response</t>

              <t>Change controller: OpenID Foundation Artifact Binding Working Group - openid-specs-ab@lists.openid.net</t>

              <t>Specification document(s): <xref target="AuthParams"/> of this document</t>

              <t>Related information: None</t>
            </list>
	  </t>
	</section>
	<?rfc subcompact="no"?>

      </section>
    </section>

  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2246"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.6125"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.6749"?>
      <?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.6750"?>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml' ?>

      <reference anchor="JWT">
        <front>
          <title>JSON Web Token</title>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
           <organization abbrev="Ping Identity">Ping Identity</organization>
          </author>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute, Ltd.</organization>
          </author>

          <date day="27" month="December" year="2012" />
        </front>

	<seriesInfo value="draft-ietf-oauth-json-web-token" name="Internet-Draft"/>
	<format target="http://tools.ietf.org/html/draft-ietf-oauth-json-web-token"
                type="HTML" />
      </reference>

      <reference anchor="JWS">
        <front>
          <title>JSON Web Signature</title>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Ping Identity">Ping Identity</organization>
          </author>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute, Ltd.</organization>
          </author>

          <date day="27" month="December" year="2012" />
        </front>

	<seriesInfo value="draft-ietf-jose-json-web-signature" name="Internet-Draft"/>
	<format target="http://tools.ietf.org/html/draft-ietf-jose-json-web-signature"
                type="HTML" />
      </reference>

      <reference anchor="JWE">
        <front>
          <title>JSON Web Encryption (JWE)</title>

	  <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
	    <organization>Microsoft</organization>
	  </author>

	  <author fullname="Eric Rescorla" initials="E." surname="Rescorla">
	    <organization>RTFM, Inc.</organization>
	  </author>

	  <author fullname="Joe Hildebrand" initials="J." surname="Hildebrand">
	    <organization>Cisco Systems, Inc.</organization>
	  </author>

	  <date day="27" month="December" year="2012" />
        </front>

	<seriesInfo value="draft-ietf-jose-json-web-encryption" name="Internet-Draft"/>
	<format target="http://tools.ietf.org/html/draft-ietf-jose-json-web-encryption" type="HTML" />
      </reference>

      <reference anchor="OpenID.Messages">
        <front>
          <title>OpenID Connect Messages 1.0</title>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute, Ltd.</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Ping Identity">Ping Identity</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft</organization>
          </author>

          <author fullname="Breno de Medeiros" initials="B." surname="de Medeiros">
            <organization abbrev="Google">Google</organization>
          </author>

	  <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
	    <organization abbrev="Salesforce">Salesforce</organization>
	  </author>

          <author fullname="Edmund Jay" initials="E." surname="Jay">
            <organization abbrev="Illumila">Illumila</organization>
          </author>

          <date day="27" month="December" year="2012" />
        </front>

        <format target="http://openid.net/specs/openid-connect-messages-1_0.html"
                type="HTML" />
      </reference>

      <reference anchor="OpenID.Registration">
        <front>
          <title>OpenID Connect Dynamic Client Registration 1.0</title>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute, Ltd.</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Ping Identity">Ping Identity</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft</organization>
          </author>

          <date day="27" month="December" year="2012" />
        </front>

        <format target="http://openid.net/specs/openid-connect-registration-1_0.html"
                type="HTML" />
      </reference>

      <reference anchor="OpenID.Discovery">
        <front>
          <title>OpenID Connect Discovery 1.0</title>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute, Ltd.</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
            <organization abbrev="Ping Identity">Ping Identity</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft</organization>
          </author>

          <author fullname="Edmund Jay" initials="E." surname="Jay">
            <organization abbrev="Illumila">Illumila</organization>
          </author>

          <date day="27" month="December" year="2012" />
        </front>

        <format target="http://openid.net/specs/openid-connect-discovery-1_0.html"
                type="HTML" />
      </reference>
    
      <reference anchor="OAuth.Responses">
        <front>
           <title>OAuth 2.0 Multiple Response Type Encoding Practices</title>

           <author fullname="Breno" initials="B." surname="de Medeiros">
             <organization abbrev="Google">Google, Inc.</organization>
           </author>

           <author fullname="Marius" initials="M." surname="Scurtescu">
             <organization abbrev="Google">Google, Inc.</organization>
           </author>

           <author fullname="Paul" initials="P." surname="Tarjan">
             <organization abbrev="Facebook"> Facebook</organization>
           </author>

           <date day="19" month="November" year="2012"></date>
        </front>

      <format target="http://openid.net/specs/oauth-v2-multiple-response-types-1_0.html"
              type="HTML" />
      </reference>

    </references>
    <references title="Informative References"> 

       <reference anchor="CORS">
        <front>
           <title>Cross-Origin Resource Sharing</title>
           <author fullname="Anne" initials="" surname="van Kesteren">
             <organization abbrev="Opera">Opera Software ASA</organization>
           </author>
           <date day="27" month="July" year="2010"></date>
        </front>
      <format target="http://www.w3.org/TR/access-control/"
              type="HTML" />
      </reference>

      <reference anchor="OpenID.Basic">
        <front>
          <title>OpenID Connect Basic Client Profile 1.0</title>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute, Ltd.</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
           <organization abbrev="Ping Identity">Ping Identity</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft</organization>
          </author>

          <author fullname="Breno de Medeiros" initials="B."
                  surname="de Medeiros">
            <organization abbrev="Google">Google</organization>
          </author>

          <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
            <organization abbrev="Salesforce">Salesforce</organization>
          </author>

          <date day="27" month="December" year="2012" />
        </front>

        <format target="http://openid.net/specs/openid-connect-basic-1_0.html"
                type="HTML" />
      </reference>

      <reference anchor="OpenID.Implicit">
        <front>
          <title>OpenID Connect Implicit Client Profile 1.0</title>

          <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
            <organization abbrev="NRI">Nomura Research Institute, Ltd.</organization>
          </author>

          <author fullname="John Bradley" initials="J." surname="Bradley">
           <organization abbrev="Ping Identity">Ping Identity</organization>
          </author>

          <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
            <organization abbrev="Microsoft">Microsoft</organization>
          </author>

          <author fullname="Breno de Medeiros" initials="B."
                  surname="de Medeiros">
            <organization abbrev="Google">Google</organization>
          </author>

          <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
            <organization abbrev="Salesforce">Salesforce</organization>
          </author>

          <author fullname="Edmund Jay" initials="E." surname="Jay">
            <organization abbrev="Illumila">Illumila</organization>
          </author>

          <date day="27" month="December" year="2012" />
        </front>

        <format target="http://openid.net/specs/openid-connect-implicit-1_0.html"
                type="HTML" />
      </reference>

    </references>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>The OpenID Community would like to thank the following people for the
      work they've done in the drafting and editing of this specification.</t>

      <t><list style="empty">
          <t>Axel Nennker (axel.nennker@telekom.de), Deutsche Telekom</t>

          <t>Breno de Medeiros (breno@gmail.com), Google</t>

          <t>George Fletcher (gffletch@aol.com), AOL</t>

          <t>Hideki Nara (hideki.nara@gmail.com), Takt Communications</t>

          <t>John Bradley (ve7jtb@ve7jtb.com), Ping Identity</t>

          <t>Nat Sakimura (n-sakimura@nri.co.jp), Nomura Research Institute, Ltd.</t>

          <t>Michael B. Jones (mbj@microsoft.com), Microsoft</t>

          <t>Ryo Ito (ryo.ito@mixi.co.jp), mixi, Inc.</t>
        </list></t>
    </section>

    <section anchor="Notices" title="Notices">
      <t>Copyright (c) 2012 The OpenID Foundation.</t>
      <t>
	The OpenID Foundation (OIDF) grants to any Contributor, developer, 
	implementer, or other interested party a non-exclusive, royalty free, 
	worldwide copyright license to reproduce, prepare derivative works from, 
	distribute, perform and display, this Implementers Draft or 
	Final Specification solely for the purposes of (i) developing 
	specifications, and (ii) implementing Implementers Drafts and 
	Final Specifications based on such documents, provided that attribution 
	be made to the OIDF as the source of the material, but that such attribution 
	does not indicate an endorsement by the OIDF.
      </t>
      <t>
	The technology described in this specification was 
	made available from contributions from various sources, 
	including members of the OpenID Foundation and others.  
	Although the OpenID Foundation has taken steps to help ensure 
	that the technology is available for distribution, it takes 
	no position regarding the validity or scope of any intellectual 
	property or other rights that might be claimed to pertain to 
	the implementation or use of the technology described in 
	this specification or the extent to which any license under 
	such rights might or might not be available; neither does it 
	represent that it has made any independent effort to identify 
	any such rights.  The OpenID Foundation and the contributors 
	to this specification make no (and hereby expressly disclaim any) 
	warranties (express, implied, or otherwise), including implied 
	warranties of merchantability, non-infringement, fitness for 
	a particular purpose, or title, related to this specification, 
	and the entire risk as to implementing this specification is 
	assumed by the implementer.  The OpenID Intellectual 
	Property Rights policy requires contributors to offer 
	a patent promise not to assert certain patent claims against 
	other contributors and against implementers.  The OpenID Foundation invites 
	any interested party to bring to its attention any copyrights, 
	patents, patent applications, or other proprietary rights 
	that may cover technology that may be required to practice 
	this specification.
      </t>
    </section>

    <section anchor="History" title="Document History">
      <t>[[ To be removed from the final specification ]]</t>

      <t>-16
        <list style="symbols">
	  <t>
	    Added Implementation Considerations section.
	  </t>
	  <t>
	    Fixed #698 - Inconsistent use of articles.
	  </t>
	  <t>
	    Fixed #655 - Specify UTF-8 as encoding scheme whenever necessary.
	  </t>
        </list></t>

      <t>-15
        <list style="symbols">
	  <t>
	    Fixed #687 - Inconsistency between <spanx style="verb">user_id</spanx>
	    and <spanx style="verb">prn</spanx> claims.  The fix changed these names:
	    user_id -> sub, user_id_types_supported -> subject_types_supported,
	    user_id_type -> subject_type, and prn -> sub.
	  </t>
	  <t>
	    Fixed #689 - Track JWT change that allows JWTs to have multiple audiences.
	  </t>
	  <t>
	    Fixed #539 - Add scope for offline access.
	  </t>
	  <t>Re #601 add Initiating login at a client from a third party</t>
	  <t>
	    Made the OpenID Foundation Artifact Binding Working Group the change controller for
	    the values registered with IANA.
	  </t>
	  <t>
	    Moved OAuth error registrations from Standard to Messages
	    since the errors are defined in Messages and not in Standard.
	  </t>
	  <t> Re #657 Changed id_token to id_token_hint in Sec 2.3.1</t>
        </list></t>

      <t>-14
        <list style="symbols">
	  <t>
	    Fixed #614 - Discovery - 3.2 Distinguishing between signature and integrity parameters for HMAC algorithms.
	    This fix tracks the parameter changes made to the JWE spec in draft-ietf-jose-json-web-encryption-06.
	    It deletes the parameters {userinfo,id_token}_encrypted_response_int.
	    It replaces the parameters {userinfo,id_token,request_object,token_endpoint}_algs_supported
	    with {userinfo,id_token,request_object,token_endpoint}_signing_alg_values_supported
	    and {userinfo,id_token,request_object,token_endpoint}_encryption_{alg,enc}_values_supported.
	  </t>
	  <t>Fixed #666 - JWS signature validation vs. verification.</t>
	  <t>Fixed #681 - Change remaining uses of "birthday" to "birthdate".</t>
	  <t>Fixed #669 - Inconsistent treatment of redirect_uri parameter.</t>
          <t>Referenced OAuth 2.0 RFCs -- RFC 6749 and RFC 6750.</t>
      </list></t>

      <t>-13
        <list style="symbols">
	  <t>Defined means of using a self-issued OP</t>
      </list></t>

      <t>-12
        <list style="symbols">
	  <t>Updated matching of redirect URI to include query parameters
	  to match Google's implementation</t>
      </list></t>
      
      <t>-11
        <list style="symbols">
	  <t>Removed <spanx style="verb">claims_in_id_token</spanx> scope value,
	  per decision on June 15, 2012 special working group call</t>
      </list></t>

      <t>-10
        <list style="symbols">
          <t>Changed <spanx style="verb">verified</spanx> to
	  <spanx style="verb">email_verified</spanx>, per issue #564</t>
          <t>Added scope value  <spanx style="verb">claims_in_id_token</spanx> as a switch
	  to indicate that the UserInfo claims should be returned in the
	  <spanx style="verb">id_token</spanx>, per issue #561</t>
          <t>Changed  <spanx style="verb">optional</spanx> claim request parameter
	  to <spanx style="verb">essential</spanx>, per issue #577</t>
	  <t>Removed Check ID Endpoint, per issue #570</t>
          <t>Specified that parameters present in both the OpenID Request Object and the
	  OAuth 2.0 Authorization Request MUST exactly match, per issue #575</t>
          <t>Changed OpenID Request Object from being specified as a JWT
	  to being specified as a JWS signed base64url encoded JSON object, per issue #592</t>
	  <t>Made use of the nonce REQUIRED when using the implicit flow
	  and OPTIONAL when using the code flow, per issue #569</t>
          <t>Changed client.example.com to client.example.org, per issue #251</t>
          <t>Removed example text for generating a nonce via a signed session cookie,
	  per issue #562</t>
	  <t>Use standards track version of JSON Web Token spec
	  (draft-ietf-oauth-json-web-token)</t>
        </list>
      </t>

      <t>-09<list style="symbols">
	  <t>Added error interaction_required and removed
	  user_mismatched, per issue #523</t>
	  <t>Changed invalid_request_request_uri to invalid_request_uri and
	  invalid_request_redirect_uri to invalid_redirect_uri, per issue #553</t>
	  <t>Added optional id_token to authorization request parameters, per issue #535</t>
	  <t>Removed use of non-existent scope parameters registry, per issue #558</t>
	  <t>Updated Notices</t>
	  <t>Updated References</t>
	</list></t>

      <t>-08<list style="symbols"> 
      <t>Updated version number and date</t>
      <t>Fix #543 Section 2.3.1.3 Request file requiring all request params to be included is false</t>
      <t>Fix Section 5.1 to reference Messages 2.4.1 rather than 3.3</t>
      <t>Added reference to CORS for JS clients to userinfo and check_id endpoints</t>
        </list></t>
           
      <t>-07<list style="symbols">
	  <t>Removed definition and usage for assertion and claim object</t>
	  <t>Removed Request File Registration Service</t>
	  <t>Consistent use of End-User</t>
	  <t>email scope allows access to the 'verified' claim</t>
	  <t>Removed language pertaining to custom userinfo schemas</t>
	  <t>Updated error section for refreshing access token</t>
	  <t>Remove 'audience' parameter from Authorization Request</t>
	  <t>Moved display=none to prompt=none</t>
	  <t>Moved IANA considerations from Messages</t>
	  <t>Check ID Endpoint returns only JSON</t>
	  <t>Removed PPID scope value</t>
	  <t>Reference Messages for validation of request object encryption and signature</t>
	  <t>Redefined 'nonce' in Authorization Request. Changed to REQUIRED parameter.</t>
	  <t>Changed usage of "approval" to "consent"</t>
	  <t>Use RFC 6125 to verify TLS endpoints</t>
	  <t>Added Privacy considerations</t>
	  <t>Changed 'request_uri' to require HTTPS unless the referenced content is signed
	    and only needs to be reachable by AS</t>
	  <t>Added hash and entropy considerations to 'request_uri'</t>
	  <t>Added requirement to compare user_id from userinfo endpoint to id_token</t>
	  <t>Check ID Endpoint SHOULD use POST</t>
	  <t>Changed UserInfo Error Response to augment and return OAuth 2.0 Bearer Token Error Response</t>
	  <t>Added section about string comparison rules needed</t>
	  <t>Added Response Encoding according to Multiple Response Types spec</t>
	  <t>Allows only 'id_token' for 'response_type' parameter in Authorization Request</t>
	  <t>Clarified redirect_uris matching</t>
	  <t>Added explanation of select_account</t>
	  <t>Changed Security Considerations to refer to corresponding section in Messages</t>
	  <t>Check ID Endpoint uses ID Token as Access Token according to Bearer Token spec</t>
      <t>Update John Bradley email and affiliation for Implementer's Draft</t>
	  <t>Removed invalid_authorization_code, invalid_id_token error codes</t>
        </list></t>
        
      <t>-06<list style="symbols">
          <t>Reworked return type wording in section 4.4.1 per ticket #174.</t>

          <t>Added reference to registered return types.</t>

          <t>Bumped Version number and date.</t>
          
          <t>Make clear the server passes the value of nonce through untouched. Ticket #97.</t>
          <t>Prevent caching of request_uri. Ticket #148.</t>
          <t>Add nonce to request examples. Ticket #147.</t>
          <t>Fixed 4.3.1.3 per ticket #150.</t>
          <t>Fixed 4.3.2 to remove display scopes per ticket #172.</t>
          <t>Make scope optional for refresh in 5.2.</t>
          <t>Reference messages 3.2.2 for field definitions in section 5.2.1 per ticket #159.</t>
          <t>Removed scopes from display value in 4.3.1 per ticket #172.</t>
          <t>Make "code" and "id_token token" response types mandatory for Authorization Servers to support.</t>
          
        </list></t>

      <t>-05<list style="symbols">
          <t>Changed check_session to check_id.</t>

          <t>schema=openid now required when requesting UserInfo.</t>

          <t>Removed display values popup, touch, and mobile, since not well defined.</t>

          <t>Resolve issue #135, clarifying that the access_token MAY
          be sent in the message body.</t>

        </list></t>

      <t>-04 <list style="symbols">
          <t>Changes associated with renaming "Lite" to "Basic Client"
          and replacing "Core" and "Framework" with "Messages" and
          "Standard".</t>

          <t>Numerous cleanups, including updating references.</t>
        </list></t>

      <t>-03 <list style="symbols">
          <t>Added secret_type to the Token Endpoint.</t>

          <t>Minor edits to the samples.</t>
        </list></t>

      <t>-02 <list style="symbols">
          <t>Incorporates feedback from Nat Sakimura.</t>
        </list></t>

      <t>-01 <list style="symbols">
          <t>First Draft that incorporates the merge of the Core and Framework
          specs.</t>
        </list></t>
    </section>
  </back>
</rfc>
